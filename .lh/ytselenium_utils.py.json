{
    "sourceFile": "ytselenium_utils.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 4,
            "patches": [
                {
                    "date": 1756932147568,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1756933213768,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,21 +8,41 @@\n from selenium.webdriver.support import expected_conditions as EC\r\n from selenium.common.exceptions import TimeoutException, NoSuchElementException, ElementClickInterceptedException\r\n from webdriver_manager.chrome import ChromeDriverManager\r\n from selenium.webdriver.chrome.service import Service as ChromeService\r\n+from selenium.webdriver.chrome.options import Options\r\n \r\n nlp = spacy.load(\"en_core_web_sm\")\r\n \r\n def fetch_youtube_transcript(url, use_ollama=False):\r\n     print(f\"Fetching YouTube transcript for {url} with Ollama: {use_ollama}\")\r\n+    options = Options()\r\n+    options.add_argument('--disable-notifications')\r\n+    options.add_experimental_option('excludeSwitches', ['enable-logging'])\r\n+    options.add_argument('--log-level=3')\r\n     service = ChromeService(ChromeDriverManager().install())\r\n-    driver = webdriver.Chrome(service=service)\r\n+    driver = webdriver.Chrome(service=service, options=options)\r\n     wait = WebDriverWait(driver, 30)\r\n \r\n     try:\r\n         driver.get(url)\r\n-        time.sleep(10)  # Allow page to load\r\n+        time.sleep(5)  # Reduced sleep, allow page to load\r\n \r\n+        # Handle consent popup\r\n+        try:\r\n+            print(\"Checking for consent popup...\")\r\n+            wait.until(EC.frame_to_be_available_and_switch_to_it((By.CSS_SELECTOR, \"iframe[src*='consent.youtube.com']\")))\r\n+            accept_button = wait.until(EC.element_to_be_clickable((By.XPATH, \"//button[contains(., 'Accept all') or contains(., 'I agree') or contains(@aria-label, 'Accept')]\")))\r\n+            try:\r\n+                accept_button.click()\r\n+            except ElementClickInterceptedException:\r\n+                driver.execute_script(\"arguments[0].click();\", accept_button)\r\n+            driver.switch_to.default_content()\r\n+            print(\"Consent popup handled.\")\r\n+            time.sleep(3)  # Allow page to refresh after consent\r\n+        except TimeoutException:\r\n+            print(\"No consent popup found or already handled.\")\r\n+\r\n         # Expand description\r\n         try:\r\n             expander_xpath = \"//ytd-text-inline-expander[@id='description-inline-expander']//tp-yt-paper-button[@id='expand']\"\r\n             description_expander = wait.until(EC.element_to_be_clickable((By.XPATH, expander_xpath)))\r\n@@ -119,15 +139,19 @@\n                     \"model\": \"qwen2.5:7b\",\r\n                     \"prompt\": f\"Enhance and correct this transcript chunk for clarity and accuracy: {chunk}. Include only the corrected text, do not include a summarization of the changes.\",\r\n                     \"stream\": False\r\n                 }\r\n-                response = requests.post(ollama_url, json=payload)\r\n-                if response.status_code == 200:\r\n-                    enhanced_text = response.json()['response']\r\n-                    enhanced_chunks.append(enhanced_text)\r\n-                else:\r\n-                    print(f\"Error enhancing with Ollama for {url}: {response.text}\")\r\n-                    enhanced_chunks.append(chunk)  # Fallback\r\n+                try:\r\n+                    response = requests.post(ollama_url, json=payload, timeout=30)\r\n+                    if response.status_code == 200:\r\n+                        enhanced_text = response.json()['response']\r\n+                        enhanced_chunks.append(enhanced_text)\r\n+                    else:\r\n+                        print(f\"Error enhancing with Ollama for {url}: {response.text}\")\r\n+                        enhanced_chunks.append(chunk)  # Fallback\r\n+                except requests.exceptions.RequestException as e:\r\n+                    print(f\"Ollama request failed: {e}. Falling back to original chunk.\")\r\n+                    enhanced_chunks.append(chunk)\r\n             processed_text = '\\n\\n'.join(enhanced_chunks)\r\n \r\n         print(f\"Transcript fetched and processed for {url}\")\r\n         return processed_text\r\n"
                },
                {
                    "date": 1756933533320,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,48 +23,40 @@\n     driver = webdriver.Chrome(service=service, options=options)\r\n     wait = WebDriverWait(driver, 30)\r\n \r\n     try:\r\n+        print(\"Step 1: Navigating to URL...\")\r\n         driver.get(url)\r\n         time.sleep(5)  # Reduced sleep, allow page to load\r\n+        print(\"Step 1 completed: Page loaded.\")\r\n \r\n-        # Handle consent popup\r\n-        try:\r\n-            print(\"Checking for consent popup...\")\r\n-            wait.until(EC.frame_to_be_available_and_switch_to_it((By.CSS_SELECTOR, \"iframe[src*='consent.youtube.com']\")))\r\n-            accept_button = wait.until(EC.element_to_be_clickable((By.XPATH, \"//button[contains(., 'Accept all') or contains(., 'I agree') or contains(@aria-label, 'Accept')]\")))\r\n-            try:\r\n-                accept_button.click()\r\n-            except ElementClickInterceptedException:\r\n-                driver.execute_script(\"arguments[0].click();\", accept_button)\r\n-            driver.switch_to.default_content()\r\n-            print(\"Consent popup handled.\")\r\n-            time.sleep(3)  # Allow page to refresh after consent\r\n-        except TimeoutException:\r\n-            print(\"No consent popup found or already handled.\")\r\n-\r\n         # Expand description\r\n         try:\r\n+            print(\"Step 3: Expanding description...\")\r\n             expander_xpath = \"//ytd-text-inline-expander[@id='description-inline-expander']//tp-yt-paper-button[@id='expand']\"\r\n             description_expander = wait.until(EC.element_to_be_clickable((By.XPATH, expander_xpath)))\r\n             try:\r\n                 description_expander.click()\r\n             except ElementClickInterceptedException:\r\n                 driver.execute_script(\"arguments[0].click();\", description_expander)\r\n             time.sleep(3)\r\n+            print(\"Step 3 completed: Description expanded.\")\r\n         except TimeoutException:\r\n-            pass  # Description may already be expanded\r\n+            print(\"Step 3: Description may already be expanded or not found.\")\r\n \r\n         # Click 'Show transcript'\r\n         try:\r\n+            print(\"Step 4: Clicking 'Show transcript' button...\")\r\n             transcript_button_xpath = \"//ytd-video-description-transcript-section-renderer//ytd-button-renderer/yt-button-shape/button\"\r\n             transcript_button = wait.until(EC.element_to_be_clickable((By.XPATH, transcript_button_xpath)))\r\n             try:\r\n                 transcript_button.click()\r\n             except ElementClickInterceptedException:\r\n                 driver.execute_script(\"arguments[0].click();\", transcript_button)\r\n             time.sleep(3)\r\n+            print(\"Step 4 completed: 'Show transcript' clicked.\")\r\n         except TimeoutException:\r\n+            print(\"Step 4: No 'Show transcript' button found in description. Trying fallback method...\")\r\n             # Fallback to more actions menu\r\n             try:\r\n                 more_actions = wait.until(EC.element_to_be_clickable((By.XPATH, '//button[@aria-label=\"More actions\"]')))\r\n                 try:\r\n@@ -77,23 +69,27 @@\n                     transcript_item.click()\r\n                 except ElementClickInterceptedException:\r\n                     driver.execute_script(\"arguments[0].click();\", transcript_item)\r\n                 time.sleep(3)\r\n+                print(\"Step 4 completed: 'Show transcript' clicked via fallback.\")\r\n             except TimeoutException:\r\n                 print(f\"Error: Could not find 'Show transcript' for {url}\")\r\n                 return None\r\n \r\n         # Wait for transcript panel\r\n         try:\r\n+            print(\"Step 5: Waiting for transcript panel to load...\")\r\n             transcript_title_xpath = \"//ytd-engagement-panel-section-list-renderer[@target-id='engagement-panel-searchable-transcript']//yt-formatted-string[@id='title-text']\"\r\n             wait.until(EC.visibility_of_element_located((By.XPATH, transcript_title_xpath)))\r\n             time.sleep(2)\r\n+            print(\"Step 5 completed: Transcript panel loaded.\")\r\n         except TimeoutException:\r\n             print(f\"Error: Transcript panel did not load for {url}\")\r\n             return None\r\n \r\n         # Extract transcript\r\n         try:\r\n+            print(\"Step 6: Extracting transcript text...\")\r\n             transcript_elements_xpath = \"//ytd-engagement-panel-section-list-renderer[@target-id='engagement-panel-searchable-transcript']//ytd-transcript-segment-renderer//yt-formatted-string\"\r\n             transcript_elements = driver.find_elements(By.XPATH, transcript_elements_xpath)\r\n             if not transcript_elements:\r\n                 transcript_elements = driver.find_elements(By.CSS_SELECTOR, \".ytd-transcript-segment-renderer .ytd-transcript-segment-text\")\r\n@@ -102,18 +98,22 @@\n             if not transcript_elements:\r\n                 print(f\"Error: No transcript elements found for {url}\")\r\n                 return None\r\n             transcript_text = '\\n'.join([elem.text.strip() for elem in transcript_elements if elem.text.strip()])\r\n+            print(f\"Step 6 completed: Extracted {len(transcript_text.splitlines())} lines of transcript.\")\r\n         except NoSuchElementException:\r\n             print(f\"Error: Transcript elements not found for {url}\")\r\n             return None\r\n \r\n         # NLP Processing\r\n+        print(\"Step 7: Processing transcript with NLP...\")\r\n         doc = nlp(transcript_text)\r\n         processed_tokens = [token.lemma_ for token in doc if not token.is_stop and not token.is_punct and token.text.strip()]\r\n         processed_text = ' '.join(processed_tokens)\r\n+        print(\"Step 7 completed: NLP processing done.\")\r\n \r\n         # Chunking\r\n+        print(\"Step 8: Chunking transcript...\")\r\n         sentences = [sent.text.strip() for sent in doc.sents if sent.text.strip()]\r\n         chunk_size = 200  # Words per chunk\r\n         chunks = []\r\n         current_chunk = []\r\n@@ -128,14 +128,17 @@\n                 current_chunk.append(sent)\r\n                 current_word_count += word_count\r\n         if current_chunk:\r\n             chunks.append(' '.join(current_chunk))\r\n+        print(f\"Step 8 completed: Created {len(chunks)} chunks.\")\r\n \r\n         # Optional Ollama enhancement\r\n         if use_ollama:\r\n+            print(\"Step 9: Enhancing chunks with Ollama...\")\r\n             ollama_url = \"http://localhost:11434/api/generate\"\r\n             enhanced_chunks = []\r\n-            for chunk in chunks:\r\n+            for i, chunk in enumerate(chunks):\r\n+                print(f\"Enhancing chunk {i+1}/{len(chunks)}...\")\r\n                 payload = {\r\n                     \"model\": \"qwen2.5:7b\",\r\n                     \"prompt\": f\"Enhance and correct this transcript chunk for clarity and accuracy: {chunk}. Include only the corrected text, do not include a summarization of the changes.\",\r\n                     \"stream\": False\r\n@@ -144,18 +147,22 @@\n                     response = requests.post(ollama_url, json=payload, timeout=30)\r\n                     if response.status_code == 200:\r\n                         enhanced_text = response.json()['response']\r\n                         enhanced_chunks.append(enhanced_text)\r\n+                        print(f\"Chunk {i+1} enhanced.\")\r\n                     else:\r\n-                        print(f\"Error enhancing with Ollama for {url}: {response.text}\")\r\n+                        print(f\"Error enhancing chunk {i+1} with Ollama: {response.text}\")\r\n                         enhanced_chunks.append(chunk)  # Fallback\r\n                 except requests.exceptions.RequestException as e:\r\n-                    print(f\"Ollama request failed: {e}. Falling back to original chunk.\")\r\n+                    print(f\"Ollama request failed for chunk {i+1}: {e}. Falling back to original chunk.\")\r\n                     enhanced_chunks.append(chunk)\r\n             processed_text = '\\n\\n'.join(enhanced_chunks)\r\n+            print(\"Step 9 completed: Ollama enhancement done.\")\r\n \r\n         print(f\"Transcript fetched and processed for {url}\")\r\n         return processed_text\r\n\\ No newline at end of file\n \r\n     finally:\r\n+        print(\"Final Step: Closing browser...\")\r\n         time.sleep(5)\r\n-        driver.quit()\n+        driver.quit()\r\n+        print(\"Browser closed.\")\n\\ No newline at end of file\n"
                },
                {
                    "date": 1756933879901,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,9 +13,9 @@\n \r\n nlp = spacy.load(\"en_core_web_sm\")\r\n \r\n def fetch_youtube_transcript(url, use_ollama=False):\r\n-    print(f\"Fetching YouTube transcript for {url} with Ollama: {use_ollama}\")\r\n+    yield (\"status\", f\"Fetching YouTube transcript for {url} with Ollama: {use_ollama}\")\r\n     options = Options()\r\n     options.add_argument('--disable-notifications')\r\n     options.add_experimental_option('excludeSwitches', ['enable-logging'])\r\n     options.add_argument('--log-level=3')\r\n@@ -23,40 +23,55 @@\n     driver = webdriver.Chrome(service=service, options=options)\r\n     wait = WebDriverWait(driver, 30)\r\n \r\n     try:\r\n-        print(\"Step 1: Navigating to URL...\")\r\n+        yield (\"status\", \"Step 1: Navigating to URL...\")\r\n         driver.get(url)\r\n         time.sleep(5)  # Reduced sleep, allow page to load\r\n-        print(\"Step 1 completed: Page loaded.\")\r\n+        yield (\"status\", \"Step 1 completed: Page loaded.\")\r\n \r\n+        # Handle consent popup\r\n+        try:\r\n+            yield (\"status\", \"Step 2: Checking for consent popup...\")\r\n+            wait.until(EC.frame_to_be_available_and_switch_to_it((By.CSS_SELECTOR, \"iframe[src*='consent.youtube.com']\")))\r\n+            accept_button = wait.until(EC.element_to_be_clickable((By.XPATH, \"//button[contains(., 'Accept all') or contains(., 'I agree') or contains(@aria-label, 'Accept')]\")))\r\n+            try:\r\n+                accept_button.click()\r\n+            except ElementClickInterceptedException:\r\n+                driver.execute_script(\"arguments[0].click();\", accept_button)\r\n+            driver.switch_to.default_content()\r\n+            yield (\"status\", \"Step 2 completed: Consent popup handled.\")\r\n+            time.sleep(3)  # Allow page to refresh after consent\r\n+        except TimeoutException:\r\n+            yield (\"status\", \"Step 2: No consent popup found or already handled.\")\r\n+\r\n         # Expand description\r\n         try:\r\n-            print(\"Step 3: Expanding description...\")\r\n+            yield (\"status\", \"Step 3: Expanding description...\")\r\n             expander_xpath = \"//ytd-text-inline-expander[@id='description-inline-expander']//tp-yt-paper-button[@id='expand']\"\r\n             description_expander = wait.until(EC.element_to_be_clickable((By.XPATH, expander_xpath)))\r\n             try:\r\n                 description_expander.click()\r\n             except ElementClickInterceptedException:\r\n                 driver.execute_script(\"arguments[0].click();\", description_expander)\r\n             time.sleep(3)\r\n-            print(\"Step 3 completed: Description expanded.\")\r\n+            yield (\"status\", \"Step 3 completed: Description expanded.\")\r\n         except TimeoutException:\r\n-            print(\"Step 3: Description may already be expanded or not found.\")\r\n+            yield (\"status\", \"Step 3: Description may already be expanded or not found.\")\r\n \r\n         # Click 'Show transcript'\r\n         try:\r\n-            print(\"Step 4: Clicking 'Show transcript' button...\")\r\n+            yield (\"status\", \"Step 4: Clicking 'Show transcript' button...\")\r\n             transcript_button_xpath = \"//ytd-video-description-transcript-section-renderer//ytd-button-renderer/yt-button-shape/button\"\r\n             transcript_button = wait.until(EC.element_to_be_clickable((By.XPATH, transcript_button_xpath)))\r\n             try:\r\n                 transcript_button.click()\r\n             except ElementClickInterceptedException:\r\n                 driver.execute_script(\"arguments[0].click();\", transcript_button)\r\n             time.sleep(3)\r\n-            print(\"Step 4 completed: 'Show transcript' clicked.\")\r\n+            yield (\"status\", \"Step 4 completed: 'Show transcript' clicked.\")\r\n         except TimeoutException:\r\n-            print(\"Step 4: No 'Show transcript' button found in description. Trying fallback method...\")\r\n+            yield (\"status\", \"Step 4: No 'Show transcript' button found in description. Trying fallback method...\")\r\n             # Fallback to more actions menu\r\n             try:\r\n                 more_actions = wait.until(EC.element_to_be_clickable((By.XPATH, '//button[@aria-label=\"More actions\"]')))\r\n                 try:\r\n@@ -69,51 +84,51 @@\n                     transcript_item.click()\r\n                 except ElementClickInterceptedException:\r\n                     driver.execute_script(\"arguments[0].click();\", transcript_item)\r\n                 time.sleep(3)\r\n-                print(\"Step 4 completed: 'Show transcript' clicked via fallback.\")\r\n+                yield (\"status\", \"Step 4 completed: 'Show transcript' clicked via fallback.\")\r\n             except TimeoutException:\r\n-                print(f\"Error: Could not find 'Show transcript' for {url}\")\r\n-                return None\r\n+                yield (\"status\", f\"Error: Could not find 'Show transcript' for {url}\")\r\n+                return\r\n \r\n         # Wait for transcript panel\r\n         try:\r\n-            print(\"Step 5: Waiting for transcript panel to load...\")\r\n+            yield (\"status\", \"Step 5: Waiting for transcript panel to load...\")\r\n             transcript_title_xpath = \"//ytd-engagement-panel-section-list-renderer[@target-id='engagement-panel-searchable-transcript']//yt-formatted-string[@id='title-text']\"\r\n             wait.until(EC.visibility_of_element_located((By.XPATH, transcript_title_xpath)))\r\n             time.sleep(2)\r\n-            print(\"Step 5 completed: Transcript panel loaded.\")\r\n+            yield (\"status\", \"Step 5 completed: Transcript panel loaded.\")\r\n         except TimeoutException:\r\n-            print(f\"Error: Transcript panel did not load for {url}\")\r\n-            return None\r\n+            yield (\"status\", f\"Error: Transcript panel did not load for {url}\")\r\n+            return\r\n \r\n         # Extract transcript\r\n         try:\r\n-            print(\"Step 6: Extracting transcript text...\")\r\n+            yield (\"status\", \"Step 6: Extracting transcript text...\")\r\n             transcript_elements_xpath = \"//ytd-engagement-panel-section-list-renderer[@target-id='engagement-panel-searchable-transcript']//ytd-transcript-segment-renderer//yt-formatted-string\"\r\n             transcript_elements = driver.find_elements(By.XPATH, transcript_elements_xpath)\r\n             if not transcript_elements:\r\n                 transcript_elements = driver.find_elements(By.CSS_SELECTOR, \".ytd-transcript-segment-renderer .ytd-transcript-segment-text\")\r\n             if not transcript_elements:\r\n                 transcript_elements = driver.find_elements(By.CSS_SELECTOR, \".cue.style-scope.ytd-transcript-body-renderer\")\r\n             if not transcript_elements:\r\n-                print(f\"Error: No transcript elements found for {url}\")\r\n-                return None\r\n+                yield (\"status\", f\"Error: No transcript elements found for {url}\")\r\n+                return\r\n             transcript_text = '\\n'.join([elem.text.strip() for elem in transcript_elements if elem.text.strip()])\r\n-            print(f\"Step 6 completed: Extracted {len(transcript_text.splitlines())} lines of transcript.\")\r\n+            yield (\"status\", f\"Step 6 completed: Extracted {len(transcript_text.splitlines())} lines of transcript.\")\r\n         except NoSuchElementException:\r\n-            print(f\"Error: Transcript elements not found for {url}\")\r\n-            return None\r\n+            yield (\"status\", f\"Error: Transcript elements not found for {url}\")\r\n+            return\r\n \r\n         # NLP Processing\r\n-        print(\"Step 7: Processing transcript with NLP...\")\r\n+        yield (\"status\", \"Step 7: Processing transcript with NLP...\")\r\n         doc = nlp(transcript_text)\r\n         processed_tokens = [token.lemma_ for token in doc if not token.is_stop and not token.is_punct and token.text.strip()]\r\n         processed_text = ' '.join(processed_tokens)\r\n-        print(\"Step 7 completed: NLP processing done.\")\r\n+        yield (\"status\", \"Step 7 completed: NLP processing done.\")\r\n \r\n         # Chunking\r\n-        print(\"Step 8: Chunking transcript...\")\r\n+        yield (\"status\", \"Step 8: Chunking transcript...\")\r\n         sentences = [sent.text.strip() for sent in doc.sents if sent.text.strip()]\r\n         chunk_size = 200  # Words per chunk\r\n         chunks = []\r\n         current_chunk = []\r\n@@ -128,17 +143,17 @@\n                 current_chunk.append(sent)\r\n                 current_word_count += word_count\r\n         if current_chunk:\r\n             chunks.append(' '.join(current_chunk))\r\n-        print(f\"Step 8 completed: Created {len(chunks)} chunks.\")\r\n+        yield (\"status\", f\"Step 8 completed: Created {len(chunks)} chunks.\")\r\n \r\n         # Optional Ollama enhancement\r\n         if use_ollama:\r\n-            print(\"Step 9: Enhancing chunks with Ollama...\")\r\n+            yield (\"status\", \"Step 9: Enhancing chunks with Ollama...\")\r\n             ollama_url = \"http://localhost:11434/api/generate\"\r\n             enhanced_chunks = []\r\n             for i, chunk in enumerate(chunks):\r\n-                print(f\"Enhancing chunk {i+1}/{len(chunks)}...\")\r\n+                yield (\"status\", f\"Enhancing chunk {i+1}/{len(chunks)}...\")\r\n                 payload = {\r\n                     \"model\": \"qwen2.5:7b\",\r\n                     \"prompt\": f\"Enhance and correct this transcript chunk for clarity and accuracy: {chunk}. Include only the corrected text, do not include a summarization of the changes.\",\r\n                     \"stream\": False\r\n@@ -147,22 +162,21 @@\n                     response = requests.post(ollama_url, json=payload, timeout=30)\r\n                     if response.status_code == 200:\r\n                         enhanced_text = response.json()['response']\r\n                         enhanced_chunks.append(enhanced_text)\r\n-                        print(f\"Chunk {i+1} enhanced.\")\r\n+                        yield (\"status\", f\"Chunk {i+1} enhanced.\")\r\n                     else:\r\n-                        print(f\"Error enhancing chunk {i+1} with Ollama: {response.text}\")\r\n+                        yield (\"status\", f\"Error enhancing chunk {i+1} with Ollama: {response.text}\")\r\n                         enhanced_chunks.append(chunk)  # Fallback\r\n                 except requests.exceptions.RequestException as e:\r\n-                    print(f\"Ollama request failed for chunk {i+1}: {e}. Falling back to original chunk.\")\r\n+                    yield (\"status\", f\"Ollama request failed for chunk {i+1}: {e}. Falling back to original chunk.\")\r\n                     enhanced_chunks.append(chunk)\r\n             processed_text = '\\n\\n'.join(enhanced_chunks)\r\n-            print(\"Step 9 completed: Ollama enhancement done.\")\r\n+            yield (\"status\", \"Step 9 completed: Ollama enhancement done.\")\r\n \r\n-        print(f\"Transcript fetched and processed for {url}\")\r\n-        return processed_text\r\n+        yield (\"transcript\", processed_text)\r\n \r\n\\ No newline at end of file\n     finally:\r\n-        print(\"Final Step: Closing browser...\")\r\n+        yield (\"status\", \"Final Step: Closing browser...\")\r\n         time.sleep(5)\r\n         driver.quit()\r\n-        print(\"Browser closed.\")\n+        yield (\"status\", \"Browser closed.\")\n\\ No newline at end of file\n"
                },
                {
                    "date": 1756933985742,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,23 +28,8 @@\n         driver.get(url)\r\n         time.sleep(5)  # Reduced sleep, allow page to load\r\n         yield (\"status\", \"Step 1 completed: Page loaded.\")\r\n \r\n-        # Handle consent popup\r\n-        try:\r\n-            yield (\"status\", \"Step 2: Checking for consent popup...\")\r\n-            wait.until(EC.frame_to_be_available_and_switch_to_it((By.CSS_SELECTOR, \"iframe[src*='consent.youtube.com']\")))\r\n-            accept_button = wait.until(EC.element_to_be_clickable((By.XPATH, \"//button[contains(., 'Accept all') or contains(., 'I agree') or contains(@aria-label, 'Accept')]\")))\r\n-            try:\r\n-                accept_button.click()\r\n-            except ElementClickInterceptedException:\r\n-                driver.execute_script(\"arguments[0].click();\", accept_button)\r\n-            driver.switch_to.default_content()\r\n-            yield (\"status\", \"Step 2 completed: Consent popup handled.\")\r\n-            time.sleep(3)  # Allow page to refresh after consent\r\n-        except TimeoutException:\r\n-            yield (\"status\", \"Step 2: No consent popup found or already handled.\")\r\n-\r\n         # Expand description\r\n         try:\r\n             yield (\"status\", \"Step 3: Expanding description...\")\r\n             expander_xpath = \"//ytd-text-inline-expander[@id='description-inline-expander']//tp-yt-paper-button[@id='expand']\"\r\n@@ -66,9 +51,9 @@\n             try:\r\n                 transcript_button.click()\r\n             except ElementClickInterceptedException:\r\n                 driver.execute_script(\"arguments[0].click();\", transcript_button)\r\n-            time.sleep(3)\r\n+            time.sleep(2)\r\n             yield (\"status\", \"Step 4 completed: 'Show transcript' clicked.\")\r\n         except TimeoutException:\r\n             yield (\"status\", \"Step 4: No 'Show transcript' button found in description. Trying fallback method...\")\r\n             # Fallback to more actions menu\r\n"
                }
            ],
            "date": 1756932147568,
            "name": "Commit-0",
            "content": "# ytselenium_utils.py\r\nimport time\r\nimport spacy\r\nimport requests\r\nfrom selenium import webdriver\r\nfrom selenium.webdriver.common.by import By\r\nfrom selenium.webdriver.support.ui import WebDriverWait\r\nfrom selenium.webdriver.support import expected_conditions as EC\r\nfrom selenium.common.exceptions import TimeoutException, NoSuchElementException, ElementClickInterceptedException\r\nfrom webdriver_manager.chrome import ChromeDriverManager\r\nfrom selenium.webdriver.chrome.service import Service as ChromeService\r\n\r\nnlp = spacy.load(\"en_core_web_sm\")\r\n\r\ndef fetch_youtube_transcript(url, use_ollama=False):\r\n    print(f\"Fetching YouTube transcript for {url} with Ollama: {use_ollama}\")\r\n    service = ChromeService(ChromeDriverManager().install())\r\n    driver = webdriver.Chrome(service=service)\r\n    wait = WebDriverWait(driver, 30)\r\n\r\n    try:\r\n        driver.get(url)\r\n        time.sleep(10)  # Allow page to load\r\n\r\n        # Expand description\r\n        try:\r\n            expander_xpath = \"//ytd-text-inline-expander[@id='description-inline-expander']//tp-yt-paper-button[@id='expand']\"\r\n            description_expander = wait.until(EC.element_to_be_clickable((By.XPATH, expander_xpath)))\r\n            try:\r\n                description_expander.click()\r\n            except ElementClickInterceptedException:\r\n                driver.execute_script(\"arguments[0].click();\", description_expander)\r\n            time.sleep(3)\r\n        except TimeoutException:\r\n            pass  # Description may already be expanded\r\n\r\n        # Click 'Show transcript'\r\n        try:\r\n            transcript_button_xpath = \"//ytd-video-description-transcript-section-renderer//ytd-button-renderer/yt-button-shape/button\"\r\n            transcript_button = wait.until(EC.element_to_be_clickable((By.XPATH, transcript_button_xpath)))\r\n            try:\r\n                transcript_button.click()\r\n            except ElementClickInterceptedException:\r\n                driver.execute_script(\"arguments[0].click();\", transcript_button)\r\n            time.sleep(3)\r\n        except TimeoutException:\r\n            # Fallback to more actions menu\r\n            try:\r\n                more_actions = wait.until(EC.element_to_be_clickable((By.XPATH, '//button[@aria-label=\"More actions\"]')))\r\n                try:\r\n                    more_actions.click()\r\n                except ElementClickInterceptedException:\r\n                    driver.execute_script(\"arguments[0].click();\", more_actions)\r\n                time.sleep(1)\r\n                transcript_item = wait.until(EC.element_to_be_clickable((By.XPATH, '//tp-yt-paper-item[contains(text(), \"Show transcript\")]')))\r\n                try:\r\n                    transcript_item.click()\r\n                except ElementClickInterceptedException:\r\n                    driver.execute_script(\"arguments[0].click();\", transcript_item)\r\n                time.sleep(3)\r\n            except TimeoutException:\r\n                print(f\"Error: Could not find 'Show transcript' for {url}\")\r\n                return None\r\n\r\n        # Wait for transcript panel\r\n        try:\r\n            transcript_title_xpath = \"//ytd-engagement-panel-section-list-renderer[@target-id='engagement-panel-searchable-transcript']//yt-formatted-string[@id='title-text']\"\r\n            wait.until(EC.visibility_of_element_located((By.XPATH, transcript_title_xpath)))\r\n            time.sleep(2)\r\n        except TimeoutException:\r\n            print(f\"Error: Transcript panel did not load for {url}\")\r\n            return None\r\n\r\n        # Extract transcript\r\n        try:\r\n            transcript_elements_xpath = \"//ytd-engagement-panel-section-list-renderer[@target-id='engagement-panel-searchable-transcript']//ytd-transcript-segment-renderer//yt-formatted-string\"\r\n            transcript_elements = driver.find_elements(By.XPATH, transcript_elements_xpath)\r\n            if not transcript_elements:\r\n                transcript_elements = driver.find_elements(By.CSS_SELECTOR, \".ytd-transcript-segment-renderer .ytd-transcript-segment-text\")\r\n            if not transcript_elements:\r\n                transcript_elements = driver.find_elements(By.CSS_SELECTOR, \".cue.style-scope.ytd-transcript-body-renderer\")\r\n            if not transcript_elements:\r\n                print(f\"Error: No transcript elements found for {url}\")\r\n                return None\r\n            transcript_text = '\\n'.join([elem.text.strip() for elem in transcript_elements if elem.text.strip()])\r\n        except NoSuchElementException:\r\n            print(f\"Error: Transcript elements not found for {url}\")\r\n            return None\r\n\r\n        # NLP Processing\r\n        doc = nlp(transcript_text)\r\n        processed_tokens = [token.lemma_ for token in doc if not token.is_stop and not token.is_punct and token.text.strip()]\r\n        processed_text = ' '.join(processed_tokens)\r\n\r\n        # Chunking\r\n        sentences = [sent.text.strip() for sent in doc.sents if sent.text.strip()]\r\n        chunk_size = 200  # Words per chunk\r\n        chunks = []\r\n        current_chunk = []\r\n        current_word_count = 0\r\n        for sent in sentences:\r\n            word_count = len(sent.split())\r\n            if current_word_count + word_count > chunk_size:\r\n                chunks.append(' '.join(current_chunk))\r\n                current_chunk = [sent]\r\n                current_word_count = word_count\r\n            else:\r\n                current_chunk.append(sent)\r\n                current_word_count += word_count\r\n        if current_chunk:\r\n            chunks.append(' '.join(current_chunk))\r\n\r\n        # Optional Ollama enhancement\r\n        if use_ollama:\r\n            ollama_url = \"http://localhost:11434/api/generate\"\r\n            enhanced_chunks = []\r\n            for chunk in chunks:\r\n                payload = {\r\n                    \"model\": \"qwen2.5:7b\",\r\n                    \"prompt\": f\"Enhance and correct this transcript chunk for clarity and accuracy: {chunk}. Include only the corrected text, do not include a summarization of the changes.\",\r\n                    \"stream\": False\r\n                }\r\n                response = requests.post(ollama_url, json=payload)\r\n                if response.status_code == 200:\r\n                    enhanced_text = response.json()['response']\r\n                    enhanced_chunks.append(enhanced_text)\r\n                else:\r\n                    print(f\"Error enhancing with Ollama for {url}: {response.text}\")\r\n                    enhanced_chunks.append(chunk)  # Fallback\r\n            processed_text = '\\n\\n'.join(enhanced_chunks)\r\n\r\n        print(f\"Transcript fetched and processed for {url}\")\r\n        return processed_text\r\n\r\n    finally:\r\n        time.sleep(5)\r\n        driver.quit()"
        }
    ]
}