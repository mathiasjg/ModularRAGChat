{
    "sourceFile": "view_utils.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 13,
            "patches": [
                {
                    "date": 1756856996910,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1756857281390,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,8 @@\n import pandas as pd\r\n from utils import lock\r\n from vectorstore_utils import vectorstore\r\n+import os\r\n \r\n def view_db(conn):\r\n     print(\"Viewing database...\")\r\n     with lock:\r\n"
                },
                {
                    "date": 1756857475606,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,7 @@\n import pandas as pd\r\n from utils import lock\r\n from vectorstore_utils import vectorstore\r\n-import os\r\n \r\n def view_db(conn):\r\n     print(\"Viewing database...\")\r\n     with lock:\r\n"
                },
                {
                    "date": 1756857547158,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,8 @@\n import pandas as pd\r\n from utils import lock\r\n from vectorstore_utils import vectorstore\r\n+import os\r\n \r\n def view_db(conn):\r\n     print(\"Viewing database...\")\r\n     with lock:\r\n"
                },
                {
                    "date": 1756858532091,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,7 @@\n import pandas as pd\r\n from utils import lock\r\n from vectorstore_utils import vectorstore\r\n-import os\r\n \r\n def view_db(conn):\r\n     print(\"Viewing database...\")\r\n     with lock:\r\n"
                },
                {
                    "date": 1756858903463,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,4 +1,5 @@\n+import os\r\n import pandas as pd\r\n from utils import lock\r\n from vectorstore_utils import vectorstore\r\n \r\n"
                },
                {
                    "date": 1756859298183,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,13 @@\n import os\r\n import pandas as pd\r\n from utils import lock\r\n from vectorstore_utils import vectorstore\r\n+from langchain_ollama import OllamaLLM\r\n+from langchain.chains import create_retrieval_chain\r\n+from langchain.chains.combine_documents import create_stuff_documents_chain\r\n+from langchain_core.prompts import ChatPromptTemplate\r\n+from db_utils import get_stored_content\r\n \r\n def view_db(conn):\r\n     print(\"Viewing database...\")\r\n     with lock:\r\n@@ -29,5 +34,40 @@\n     return out\r\n \r\n def refresh_tasks(tasks):\r\n     print(\"Refreshing tasks...\")\r\n-    return pd.DataFrame(tasks)\n\\ No newline at end of file\n+    return pd.DataFrame(tasks)\r\n+\r\n+def show_task_detail(task_id, tasks, conn):\r\n+    print(f\"Showing detail for task ID: {task_id}\")\r\n+    if task_id is None or task_id < 0 or task_id >= len(tasks):\r\n+        return \"Invalid task ID\", \"\", \"\"\r\n+    task = tasks[task_id]\r\n+    if 'urls' not in task or 'tag' not in task:\r\n+        return \"No details available for this task\", \"\", \"\"\r\n+    content_out = \"\"\r\n+    for url in task['urls']:\r\n+        cleaned = get_stored_content(conn, url)\r\n+        if cleaned:\r\n+            content_out += f\"**{url}**\\n{cleaned[:500]}...\\n\\n\"\r\n+    \r\n+    llm = OllamaLLM(model=MODEL_NAME)\r\n+    retriever = vectorstore.as_retriever(search_kwargs={\"k\": 5, \"filter\": {\"tag\": task['tag']}})\r\n+    \r\n+    summary_prompt = ChatPromptTemplate.from_template(\r\n+        \"Summarize the following retrieved content in a concise manner:\\n\\n{context}\"\r\n+    )\r\n+    summary_chain = create_stuff_documents_chain(llm, summary_prompt)\r\n+    summary_chain_with_docs = create_retrieval_chain(retriever, summary_chain)\r\n+    summary_response = summary_chain_with_docs.invoke({\"input\": \"\"})\r\n+    summary = summary_response[\"answer\"]\r\n+    \r\n+    qa_prompt = ChatPromptTemplate.from_template(\r\n+        \"Answer the question based only on the following context:\\n\\n{context}\\n\\nQuestion: {input}\\nIf the context doesn't contain relevant information, say 'I don't know'.\"\r\n+    )\r\n+    qa_chain = create_stuff_documents_chain(llm, qa_prompt)\r\n+    qa_chain_with_docs = create_retrieval_chain(retriever, qa_chain)\r\n+    qa_response = qa_chain_with_docs.invoke({\"input\": task['query']})\r\n+    answer = qa_response[\"answer\"]\r\n+    \r\n+    print(\"Task detail generated.\")\r\n+    return content_out, summary, answer\n\\ No newline at end of file\n"
                },
                {
                    "date": 1756859474556,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,8 +6,9 @@\n from langchain.chains import create_retrieval_chain\r\n from langchain.chains.combine_documents import create_stuff_documents_chain\r\n from langchain_core.prompts import ChatPromptTemplate\r\n from db_utils import get_stored_content\r\n+from main import conn  # Import global conn\r\n \r\n def view_db(conn):\r\n     print(\"Viewing database...\")\r\n     with lock:\r\n@@ -36,9 +37,9 @@\n def refresh_tasks(tasks):\r\n     print(\"Refreshing tasks...\")\r\n     return pd.DataFrame(tasks)\r\n \r\n-def show_task_detail(task_id, tasks, conn):\r\n+def show_task_detail(task_id, tasks):\r\n     print(f\"Showing detail for task ID: {task_id}\")\r\n     if task_id is None or task_id < 0 or task_id >= len(tasks):\r\n         return \"Invalid task ID\", \"\", \"\"\r\n     task = tasks[task_id]\r\n"
                },
                {
                    "date": 1756859550339,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,9 +6,8 @@\n from langchain.chains import create_retrieval_chain\r\n from langchain.chains.combine_documents import create_stuff_documents_chain\r\n from langchain_core.prompts import ChatPromptTemplate\r\n from db_utils import get_stored_content\r\n-from main import conn  # Import global conn\r\n \r\n def view_db(conn):\r\n     print(\"Viewing database...\")\r\n     with lock:\r\n@@ -37,9 +36,9 @@\n def refresh_tasks(tasks):\r\n     print(\"Refreshing tasks...\")\r\n     return pd.DataFrame(tasks)\r\n \r\n-def show_task_detail(task_id, tasks):\r\n+def show_task_detail(task_id, tasks, conn):\r\n     print(f\"Showing detail for task ID: {task_id}\")\r\n     if task_id is None or task_id < 0 or task_id >= len(tasks):\r\n         return \"Invalid task ID\", \"\", \"\"\r\n     task = tasks[task_id]\r\n"
                },
                {
                    "date": 1756877197900,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,8 +6,9 @@\n from langchain.chains import create_retrieval_chain\r\n from langchain.chains.combine_documents import create_stuff_documents_chain\r\n from langchain_core.prompts import ChatPromptTemplate\r\n from db_utils import get_stored_content\r\n+from config import MODEL_NAME\r\n \r\n def view_db(conn):\r\n     print(\"Viewing database...\")\r\n     with lock:\r\n"
                },
                {
                    "date": 1756936631036,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,4 +1,5 @@\n+# view_utils.py\r\n import os\r\n import pandas as pd\r\n from utils import lock\r\n from vectorstore_utils import vectorstore\r\n@@ -7,8 +8,9 @@\n from langchain.chains.combine_documents import create_stuff_documents_chain\r\n from langchain_core.prompts import ChatPromptTemplate\r\n from db_utils import get_stored_content\r\n from config import MODEL_NAME\r\n+import sqlite3\r\n \r\n def view_db(conn):\r\n     print(\"Viewing database...\")\r\n     with lock:\r\n@@ -70,5 +72,18 @@\n     qa_response = qa_chain_with_docs.invoke({\"input\": task['query']})\r\n     answer = qa_response[\"answer\"]\r\n     \r\n     print(\"Task detail generated.\")\r\n-    return content_out, summary, answer\n\\ No newline at end of file\n+    return content_out, summary, answer\r\n+\r\n+def view_available_tags():\r\n+    conn = sqlite3.connect('crawled.db')\r\n+    c = conn.cursor()\r\n+    c.execute(\"SELECT DISTINCT tag FROM chunks WHERE tag IS NOT NULL\")\r\n+    tags = [row[0] for row in c.fetchall()]\r\n+    conn.close()\r\n+    if not tags:\r\n+        return \"No available data sources (tags) found.\"\r\n+    out = \"**Available Data Sources (Tags):**\\n\"\r\n+    for tag in tags:\r\n+        out += f\"- {tag}\\n\"\r\n+    return out\n\\ No newline at end of file\n"
                },
                {
                    "date": 1756939287892,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,8 +9,10 @@\n from langchain_core.prompts import ChatPromptTemplate\r\n from db_utils import get_stored_content\r\n from config import MODEL_NAME\r\n import sqlite3\r\n+from sqlalchemy import create_engine\r\n+import faissqlite  # Assume installed; if not, comment out and use basic FAISS\r\n \r\n def view_db(conn):\r\n     print(\"Viewing database...\")\r\n     with lock:\r\n@@ -18,8 +20,15 @@\n         df_chunks = pd.read_sql(\"SELECT * FROM chunks\", conn)\r\n     print(\"Database viewed.\")\r\n     return df_urls, df_chunks\r\n \r\n+def execute_sql_query(conn, sql_query):\r\n+    try:\r\n+        df = pd.read_sql(sql_query, conn)\r\n+        return df.to_markdown(), \"\"\r\n+    except Exception as e:\r\n+        return \"\", f\"Error executing query: {str(e)}\"\r\n+\r\n def view_vectorstore():\r\n     print(\"Viewing vectorstore...\")\r\n     with lock:\r\n         if vectorstore.index.ntotal == 0:\r\n@@ -35,8 +44,18 @@\n         out += f\"Chunk: {doc.page_content[:200]}...\\n\\n\"\r\n     print(\"Vectorstore viewed.\")\r\n     return out\r\n \r\n+def perform_similarity_search(query_text):\r\n+    embeddings = OllamaEmbeddings(model=MODEL_NAME)  # Assume same as project\r\n+    query_emb = embeddings.embed_query(query_text)\r\n+    distances, indices = vectorstore.index.search(query_emb, k=5)\r\n+    results = \"\"\r\n+    for idx in indices[0]:\r\n+        doc = vectorstore.similarity_search_by_index(idx)\r\n+        results += f\"Document: {doc.page_content[:200]}... (Score: {distances[0][idx]})\\n\\n\"\r\n+    return results\r\n+\r\n def refresh_tasks(tasks):\r\n     print(\"Refreshing tasks...\")\r\n     return pd.DataFrame(tasks)\r\n \r\n"
                },
                {
                    "date": 1756939475496,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,8 +11,9 @@\n from config import MODEL_NAME\r\n import sqlite3\r\n from sqlalchemy import create_engine\r\n import faissqlite  # Assume installed; if not, comment out and use basic FAISS\r\n+from langchain_ollama import OllamaEmbeddings\r\n \r\n def view_db(conn):\r\n     print(\"Viewing database...\")\r\n     with lock:\r\n"
                },
                {
                    "date": 1756958285573,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n # view_utils.py\r\n import os\r\n import pandas as pd\r\n from utils import lock\r\n-from vectorstore_utils import vectorstore\r\n+from vectorstore_manager import get_vectorstore\r\n from langchain_ollama import OllamaLLM\r\n from langchain.chains import create_retrieval_chain\r\n from langchain.chains.combine_documents import create_stuff_documents_chain\r\n from langchain_core.prompts import ChatPromptTemplate\r\n@@ -31,11 +31,11 @@\n \r\n def view_vectorstore():\r\n     print(\"Viewing vectorstore...\")\r\n     with lock:\r\n-        if vectorstore.index.ntotal == 0:\r\n+        if get_vectorstore().index.ntotal == 0:\r\n             return \"No content in vectorstore.\"\r\n-        docs = vectorstore.similarity_search(\" \", k=vectorstore.index.ntotal)\r\n+        docs = get_vectorstore().similarity_search(\" \", k=get_vectorstore().index.ntotal)\r\n     out = \"\"\r\n     seen_sources = set()\r\n     for doc in docs:\r\n         source = doc.metadata.get('source', 'Unknown')\r\n@@ -48,12 +48,12 @@\n \r\n def perform_similarity_search(query_text):\r\n     embeddings = OllamaEmbeddings(model=MODEL_NAME)  # Assume same as project\r\n     query_emb = embeddings.embed_query(query_text)\r\n-    distances, indices = vectorstore.index.search(query_emb, k=5)\r\n+    distances, indices = get_vectorstore().index.search(query_emb, k=5)\r\n     results = \"\"\r\n     for idx in indices[0]:\r\n-        doc = vectorstore.similarity_search_by_index(idx)\r\n+        doc = get_vectorstore().similarity_search_by_index(idx)\r\n         results += f\"Document: {doc.page_content[:200]}... (Score: {distances[0][idx]})\\n\\n\"\r\n     return results\r\n \r\n def refresh_tasks(tasks):\r\n@@ -73,9 +73,9 @@\n         if cleaned:\r\n             content_out += f\"**{url}**\\n{cleaned[:500]}...\\n\\n\"\r\n     \r\n     llm = OllamaLLM(model=MODEL_NAME)\r\n-    retriever = vectorstore.as_retriever(search_kwargs={\"k\": 5, \"filter\": {\"tag\": task['tag']}})\r\n+    retriever = get_vectorstore(task['tag']).as_retriever(search_kwargs={\"k\": 5, \"filter\": {\"tag\": task['tag']}})\r\n     \r\n     summary_prompt = ChatPromptTemplate.from_template(\r\n         \"Summarize the following retrieved content in a concise manner:\\n\\n{context}\"\r\n     )\r\n"
                }
            ],
            "date": 1756856996910,
            "name": "Commit-0",
            "content": "import pandas as pd\r\nfrom utils import lock\r\nfrom vectorstore_utils import vectorstore\r\n\r\ndef view_db(conn):\r\n    print(\"Viewing database...\")\r\n    with lock:\r\n        df_urls = pd.read_sql(\"SELECT * FROM urls\", conn)\r\n        df_chunks = pd.read_sql(\"SELECT * FROM chunks\", conn)\r\n    print(\"Database viewed.\")\r\n    return df_urls, df_chunks\r\n\r\ndef view_vectorstore():\r\n    print(\"Viewing vectorstore...\")\r\n    with lock:\r\n        if vectorstore.index.ntotal == 0:\r\n            return \"No content in vectorstore.\"\r\n        docs = vectorstore.similarity_search(\" \", k=vectorstore.index.ntotal)\r\n    out = \"\"\r\n    seen_sources = set()\r\n    for doc in docs:\r\n        source = doc.metadata.get('source', 'Unknown')\r\n        if source not in seen_sources:\r\n            seen_sources.add(source)\r\n            out += f\"**Source: {source}**\\n\"\r\n        out += f\"Chunk: {doc.page_content[:200]}...\\n\\n\"\r\n    print(\"Vectorstore viewed.\")\r\n    return out\r\n\r\ndef refresh_tasks(tasks):\r\n    print(\"Refreshing tasks...\")\r\n    return pd.DataFrame(tasks)"
        }
    ]
}