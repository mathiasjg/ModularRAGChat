{
    "sourceFile": "db_utils.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 12,
            "patches": [
                {
                    "date": 1756856970798,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1756857260435,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,9 @@\n import sqlite3\r\n from datetime import datetime, timedelta\r\n import hashlib\r\n from utils import lock\r\n+import os\r\n \r\n def init_db():\r\n     print(\"Initializing database...\")\r\n     conn = sqlite3.connect('crawled.db', check_same_thread=False)\r\n"
                },
                {
                    "date": 1756857423612,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,8 @@\n import sqlite3\r\n from datetime import datetime, timedelta\r\n import hashlib\r\n from utils import lock\r\n-import os\r\n \r\n def init_db():\r\n     print(\"Initializing database...\")\r\n     conn = sqlite3.connect('crawled.db', check_same_thread=False)\r\n"
                },
                {
                    "date": 1756857586491,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,9 @@\n import sqlite3\r\n from datetime import datetime, timedelta\r\n import hashlib\r\n from utils import lock\r\n+import os\r\n \r\n def init_db():\r\n     print(\"Initializing database...\")\r\n     conn = sqlite3.connect('crawled.db', check_same_thread=False)\r\n"
                },
                {
                    "date": 1756858454118,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,61 @@\n+import sqlite3\r\n+from datetime import datetime, timedelta\r\n+import hashlib\r\n+from utils import lock\r\n+import os\r\n+\r\n+def init_db():\r\n+    print(\"Initializing database...\")\r\n+    conn = sqlite3.connect('crawled.db', check_same_thread=False)\r\n+    c = conn.cursor()\r\n+    c.execute('''CREATE TABLE IF NOT EXISTS urls\r\n+                 (url TEXT PRIMARY KEY, timestamp DATETIME, cleaned_text TEXT)''')\r\n+    c.execute('''CREATE TABLE IF NOT EXISTS chunks\r\n+                 (hash TEXT PRIMARY KEY, content TEXT, source TEXT)''')\r\n+    conn.commit()\r\n+    print(\"Database initialized.\")\r\n+    return conn\r\n+\r\n+def get_stored_content(conn, url):\r\n+    print(f\"Checking stored content for URL: {url}\")\r\n+    with lock:\r\n+        c = conn.cursor()\r\n+        c.execute(\"SELECT cleaned_text, timestamp FROM urls WHERE url = ?\", (url,))\r\n+        result = c.fetchone()\r\n+        if result:\r\n+            text, ts_str = result\r\n+            ts = datetime.fromisoformat(ts_str)\r\n+            if datetime.now() - ts < timedelta(days=1):\r\n+                print(f\"Found recent stored content for {url}\")\r\n+                return text\r\n+            else:\r\n+                print(f\"Stored content for {url} is outdated.\")\r\n+        else:\r\n+            print(f\"No stored content found for {url}\")\r\n+    return None\r\n+\r\n+def store_content(conn, url, cleaned_text):\r\n+    print(f\"Storing content for URL: {url}\")\r\n+    ts = datetime.now().isoformat()\r\n+    with lock:\r\n+        c = conn.cursor()\r\n+        c.execute(\"INSERT OR REPLACE INTO urls (url, timestamp, cleaned_text) VALUES (?, ?, ?)\",\r\n+                  (url, ts, cleaned_text))\r\n+        conn.commit()\r\n+    print(f\"Content stored for {url}\")\r\n+\r\n+def add_chunk_if_new(conn, content, source):\r\n+    print(f\"Adding new chunk if not exists for source: {source}\")\r\n+    chunk_hash = hashlib.sha256(content.encode()).hexdigest()\r\n+    with lock:\r\n+        c = conn.cursor()\r\n+        c.execute(\"SELECT hash FROM chunks WHERE hash = ?\", (chunk_hash,))\r\n+        if not c.fetchone():\r\n+            c.execute(\"INSERT INTO chunks (hash, content, source) VALUES (?, ?, ?)\",\r\n+                      (chunk_hash, content, source))\r\n+            conn.commit()\r\n+            print(\"New chunk added.\")\r\n+            return True\r\n+        else:\r\n+            print(\"Chunk already exists.\")\r\n+    return False\n\\ No newline at end of file\n"
                },
                {
                    "date": 1756858847665,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,70 +1,9 @@\n-import sqlite3\r\n-from datetime import datetime, timedelta\r\n-import hashlib\r\n-from utils import lock\r\n import os\r\n-\r\n-def init_db():\r\n-    print(\"Initializing database...\")\r\n-    conn = sqlite3.connect('crawled.db', check_same_thread=False)\r\n-    c = conn.cursor()\r\n-    c.execute('''CREATE TABLE IF NOT EXISTS urls\r\n-                 (url TEXT PRIMARY KEY, timestamp DATETIME, cleaned_text TEXT)''')\r\n-    c.execute('''CREATE TABLE IF NOT EXISTS chunks\r\n-                 (hash TEXT PRIMARY KEY, content TEXT, source TEXT)''')\r\n-    conn.commit()\r\n-    print(\"Database initialized.\")\r\n-    return conn\r\n-\r\n-def get_stored_content(conn, url):\r\n-    print(f\"Checking stored content for URL: {url}\")\r\n-    with lock:\r\n-        c = conn.cursor()\r\n-        c.execute(\"SELECT cleaned_text, timestamp FROM urls WHERE url = ?\", (url,))\r\n-        result = c.fetchone()\r\n-        if result:\r\n-            text, ts_str = result\r\n-            ts = datetime.fromisoformat(ts_str)\r\n-            if datetime.now() - ts < timedelta(days=1):\r\n-                print(f\"Found recent stored content for {url}\")\r\n-                return text\r\n-            else:\r\n-                print(f\"Stored content for {url} is outdated.\")\r\n-        else:\r\n-            print(f\"No stored content found for {url}\")\r\n-    return None\r\n-\r\n-def store_content(conn, url, cleaned_text):\r\n-    print(f\"Storing content for URL: {url}\")\r\n-    ts = datetime.now().isoformat()\r\n-    with lock:\r\n-        c = conn.cursor()\r\n-        c.execute(\"INSERT OR REPLACE INTO urls (url, timestamp, cleaned_text) VALUES (?, ?, ?)\",\r\n-                  (url, ts, cleaned_text))\r\n-        conn.commit()\r\n-    print(f\"Content stored for {url}\")\r\n-\r\n-def add_chunk_if_new(conn, content, source):\r\n-    print(f\"Adding new chunk if not exists for source: {source}\")\r\n-    chunk_hash = hashlib.sha256(content.encode()).hexdigest()\r\n-    with lock:\r\n-        c = conn.cursor()\r\n-        c.execute(\"SELECT hash FROM chunks WHERE hash = ?\", (chunk_hash,))\r\n-        if not c.fetchone():\r\n-            c.execute(\"INSERT INTO chunks (hash, content, source) VALUES (?, ?, ?)\",\r\n-                      (chunk_hash, content, source))\r\n-            conn.commit()\r\n-            print(\"New chunk added.\")\r\n-            return True\r\n-        else:\r\n-            print(\"Chunk already exists.\")\r\n-    return False\n import sqlite3\r\n from datetime import datetime, timedelta\r\n import hashlib\r\n from utils import lock\r\n-import os\r\n \r\n def init_db():\r\n     print(\"Initializing database...\")\r\n     conn = sqlite3.connect('crawled.db', check_same_thread=False)\r\n"
                },
                {
                    "date": 1756874176112,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,9 +10,9 @@\n     c = conn.cursor()\r\n     c.execute('''CREATE TABLE IF NOT EXISTS urls\r\n                  (url TEXT PRIMARY KEY, timestamp DATETIME, cleaned_text TEXT)''')\r\n     c.execute('''CREATE TABLE IF NOT EXISTS chunks\r\n-                 (hash TEXT PRIMARY KEY, content TEXT, source TEXT)''')\r\n+                 (hash TEXT PRIMARY KEY, content TEXT, source TEXT, tag TEXT)''')\r\n     conn.commit()\r\n     print(\"Database initialized.\")\r\n     return conn\r\n \r\n@@ -43,19 +43,26 @@\n                   (url, ts, cleaned_text))\r\n         conn.commit()\r\n     print(f\"Content stored for {url}\")\r\n \r\n-def add_chunk_if_new(conn, content, source):\r\n-    print(f\"Adding new chunk if not exists for source: {source}\")\r\n+def add_chunk_if_new(conn, content, source, tag=None):\r\n+    print(f\"Adding new chunk if not exists for source: {source}, tag: {tag}\")\r\n     chunk_hash = hashlib.sha256(content.encode()).hexdigest()\r\n     with lock:\r\n         c = conn.cursor()\r\n         c.execute(\"SELECT hash FROM chunks WHERE hash = ?\", (chunk_hash,))\r\n         if not c.fetchone():\r\n-            c.execute(\"INSERT INTO chunks (hash, content, source) VALUES (?, ?, ?)\",\r\n-                      (chunk_hash, content, source))\r\n+            c.execute(\"INSERT INTO chunks (hash, content, source, tag) VALUES (?, ?, ?, ?)\",\r\n+                      (chunk_hash, content, source, tag))\r\n             conn.commit()\r\n             print(\"New chunk added.\")\r\n\\ No newline at end of file\n             return True\r\n         else:\r\n             print(\"Chunk already exists.\")\r\n-    return False\n+    return False\r\n+\r\n+def get_unique_tags(conn):\r\n+    with lock:\r\n+        c = conn.cursor()\r\n+        c.execute(\"SELECT DISTINCT tag FROM chunks WHERE tag IS NOT NULL\")\r\n+        tags = [row[0] for row in c.fetchall()]\r\n+    return tags\n\\ No newline at end of file\n"
                },
                {
                    "date": 1756874313845,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,8 +11,16 @@\n     c.execute('''CREATE TABLE IF NOT EXISTS urls\r\n                  (url TEXT PRIMARY KEY, timestamp DATETIME, cleaned_text TEXT)''')\r\n     c.execute('''CREATE TABLE IF NOT EXISTS chunks\r\n                  (hash TEXT PRIMARY KEY, content TEXT, source TEXT, tag TEXT)''')\r\n+    # Add tag column if not exists (for migration)\r\n+    try:\r\n+        c.execute(\"ALTER TABLE chunks ADD COLUMN tag TEXT\")\r\n+        print(\"Added 'tag' column to chunks table.\")\r\n+    except sqlite3.OperationalError as e:\r\n+        if \"duplicate column name\" not in str(e):\r\n+            raise e\r\n+        print(\"'tag' column already exists in chunks table.\")\r\n     conn.commit()\r\n     print(\"Database initialized.\")\r\n     return conn\r\n \r\n@@ -57,12 +65,5 @@\n             print(\"New chunk added.\")\r\n             return True\r\n         else:\r\n             print(\"Chunk already exists.\")\r\n-    return False\r\n-\r\n-def get_unique_tags(conn):\r\n-    with lock:\r\n-        c = conn.cursor()\r\n-        c.execute(\"SELECT DISTINCT tag FROM chunks WHERE tag IS NOT NULL\")\r\n-        tags = [row[0] for row in c.fetchall()]\r\n-    return tags\n\\ No newline at end of file\n+    return False\n\\ No newline at end of file\n"
                },
                {
                    "date": 1756874474200,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,76 @@\n+import os\r\n+import sqlite3\r\n+from datetime import datetime, timedelta\r\n+import hashlib\r\n+from utils import lock\r\n+\r\n+def init_db():\r\n+    print(\"Initializing database...\")\r\n+    conn = sqlite3.connect('crawled.db', check_same_thread=False)\r\n+    c = conn.cursor()\r\n+    c.execute('''CREATE TABLE IF NOT EXISTS urls\r\n+                 (url TEXT PRIMARY KEY, timestamp DATETIME, cleaned_text TEXT)''')\r\n+    c.execute('''CREATE TABLE IF NOT EXISTS chunks\r\n+                 (hash TEXT PRIMARY KEY, content TEXT, source TEXT, tag TEXT)''')\r\n+    # Add tag column if not exists (for migration)\r\n+    try:\r\n+        c.execute(\"ALTER TABLE chunks ADD COLUMN tag TEXT\")\r\n+        print(\"Added 'tag' column to chunks table.\")\r\n+    except sqlite3.OperationalError as e:\r\n+        if \"duplicate column name\" not in str(e):\r\n+            raise e\r\n+        print(\"'tag' column already exists in chunks table.\")\r\n+    conn.commit()\r\n+    print(\"Database initialized.\")\r\n+    return conn\r\n+\r\n+def get_stored_content(conn, url):\r\n+    print(f\"Checking stored content for URL: {url}\")\r\n+    with lock:\r\n+        c = conn.cursor()\r\n+        c.execute(\"SELECT cleaned_text, timestamp FROM urls WHERE url = ?\", (url,))\r\n+        result = c.fetchone()\r\n+        if result:\r\n+            text, ts_str = result\r\n+            ts = datetime.fromisoformat(ts_str)\r\n+            if datetime.now() - ts < timedelta(days=1):\r\n+                print(f\"Found recent stored content for {url}\")\r\n+                return text\r\n+            else:\r\n+                print(f\"Stored content for {url} is outdated.\")\r\n+        else:\r\n+            print(f\"No stored content found for {url}\")\r\n+    return None\r\n+\r\n+def store_content(conn, url, cleaned_text):\r\n+    print(f\"Storing content for URL: {url}\")\r\n+    ts = datetime.now().isoformat()\r\n+    with lock:\r\n+        c = conn.cursor()\r\n+        c.execute(\"INSERT OR REPLACE INTO urls (url, timestamp, cleaned_text) VALUES (?, ?, ?)\",\r\n+                  (url, ts, cleaned_text))\r\n+        conn.commit()\r\n+    print(f\"Content stored for {url}\")\r\n+\r\n+def add_chunk_if_new(conn, content, source, tag=None):\r\n+    print(f\"Adding new chunk if not exists for source: {source}, tag: {tag}\")\r\n+    chunk_hash = hashlib.sha256(content.encode()).hexdigest()\r\n+    with lock:\r\n+        c = conn.cursor()\r\n+        c.execute(\"SELECT hash FROM chunks WHERE hash = ?\", (chunk_hash,))\r\n+        if not c.fetchone():\r\n+            c.execute(\"INSERT INTO chunks (hash, content, source, tag) VALUES (?, ?, ?, ?)\",\r\n+                      (chunk_hash, content, source, tag))\r\n+            conn.commit()\r\n+            print(\"New chunk added.\")\r\n+            return True\r\n+        else:\r\n+            print(\"Chunk already exists.\")\r\n+    return False\r\n+\r\n+def get_unique_tags(conn):\r\n+    with lock:\r\n+        c = conn.cursor()\r\n+        c.execute(\"SELECT DISTINCT tag FROM chunks WHERE tag IS NOT NULL\")\r\n+        tags = [row[0] for row in c.fetchall()]\r\n+    return tags\n\\ No newline at end of file\n"
                },
                {
                    "date": 1756938364261,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,4 +1,5 @@\n+# db_utils.py\r\n import os\r\n import sqlite3\r\n from datetime import datetime, timedelta\r\n import hashlib\r\n@@ -38,9 +39,9 @@\n                 return text\r\n             else:\r\n                 print(f\"Stored content for {url} is outdated.\")\r\n         else:\r\n-            print(f\"No stored content found for {url}\")\r\n+            print(f\"No stored content found for {url}. Processing now...\")\r\n     return None\r\n \r\n def store_content(conn, url, cleaned_text):\r\n     print(f\"Storing content for URL: {url}\")\r\n@@ -72,74 +73,5 @@\n     with lock:\r\n         c = conn.cursor()\r\n         c.execute(\"SELECT DISTINCT tag FROM chunks WHERE tag IS NOT NULL\")\r\n         tags = [row[0] for row in c.fetchall()]\r\n-    return tags\n-import os\r\n-import sqlite3\r\n-from datetime import datetime, timedelta\r\n-import hashlib\r\n-from utils import lock\r\n-\r\n-def init_db():\r\n-    print(\"Initializing database...\")\r\n-    conn = sqlite3.connect('crawled.db', check_same_thread=False)\r\n-    c = conn.cursor()\r\n-    c.execute('''CREATE TABLE IF NOT EXISTS urls\r\n-                 (url TEXT PRIMARY KEY, timestamp DATETIME, cleaned_text TEXT)''')\r\n-    c.execute('''CREATE TABLE IF NOT EXISTS chunks\r\n-                 (hash TEXT PRIMARY KEY, content TEXT, source TEXT, tag TEXT)''')\r\n-    # Add tag column if not exists (for migration)\r\n-    try:\r\n-        c.execute(\"ALTER TABLE chunks ADD COLUMN tag TEXT\")\r\n-        print(\"Added 'tag' column to chunks table.\")\r\n-    except sqlite3.OperationalError as e:\r\n-        if \"duplicate column name\" not in str(e):\r\n-            raise e\r\n-        print(\"'tag' column already exists in chunks table.\")\r\n-    conn.commit()\r\n-    print(\"Database initialized.\")\r\n-    return conn\r\n-\r\n-def get_stored_content(conn, url):\r\n-    print(f\"Checking stored content for URL: {url}\")\r\n-    with lock:\r\n-        c = conn.cursor()\r\n-        c.execute(\"SELECT cleaned_text, timestamp FROM urls WHERE url = ?\", (url,))\r\n-        result = c.fetchone()\r\n-        if result:\r\n-            text, ts_str = result\r\n-            ts = datetime.fromisoformat(ts_str)\r\n-            if datetime.now() - ts < timedelta(days=1):\r\n-                print(f\"Found recent stored content for {url}\")\r\n-                return text\r\n-            else:\r\n-                print(f\"Stored content for {url} is outdated.\")\r\n-        else:\r\n-            print(f\"No stored content found for {url}\")\r\n-    return None\r\n-\r\n-def store_content(conn, url, cleaned_text):\r\n-    print(f\"Storing content for URL: {url}\")\r\n-    ts = datetime.now().isoformat()\r\n-    with lock:\r\n-        c = conn.cursor()\r\n-        c.execute(\"INSERT OR REPLACE INTO urls (url, timestamp, cleaned_text) VALUES (?, ?, ?)\",\r\n-                  (url, ts, cleaned_text))\r\n-        conn.commit()\r\n-    print(f\"Content stored for {url}\")\r\n-\r\n-def add_chunk_if_new(conn, content, source, tag=None):\r\n-    print(f\"Adding new chunk if not exists for source: {source}, tag: {tag}\")\r\n-    chunk_hash = hashlib.sha256(content.encode()).hexdigest()\r\n-    with lock:\r\n-        c = conn.cursor()\r\n-        c.execute(\"SELECT hash FROM chunks WHERE hash = ?\", (chunk_hash,))\r\n-        if not c.fetchone():\r\n-            c.execute(\"INSERT INTO chunks (hash, content, source, tag) VALUES (?, ?, ?, ?)\",\r\n-                      (chunk_hash, content, source, tag))\r\n-            conn.commit()\r\n-            print(\"New chunk added.\")\r\n-            return True\r\n-        else:\r\n-            print(\"Chunk already exists.\")\r\n-    return False\n\\ No newline at end of file\n+    return tags\n\\ No newline at end of file\n"
                },
                {
                    "date": 1756944579932,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,8 +12,10 @@\n     c.execute('''CREATE TABLE IF NOT EXISTS urls\r\n                  (url TEXT PRIMARY KEY, timestamp DATETIME, cleaned_text TEXT)''')\r\n     c.execute('''CREATE TABLE IF NOT EXISTS chunks\r\n                  (hash TEXT PRIMARY KEY, content TEXT, source TEXT, tag TEXT)''')\r\n+    c.execute('''CREATE TABLE IF NOT EXISTS collections\r\n+                 (name TEXT PRIMARY KEY, tag TEXT)''')\r\n     # Add tag column if not exists (for migration)\r\n     try:\r\n         c.execute(\"ALTER TABLE chunks ADD COLUMN tag TEXT\")\r\n         print(\"Added 'tag' column to chunks table.\")\r\n@@ -73,5 +75,18 @@\n     with lock:\r\n         c = conn.cursor()\r\n         c.execute(\"SELECT DISTINCT tag FROM chunks WHERE tag IS NOT NULL\")\r\n         tags = [row[0] for row in c.fetchall()]\r\n-    return tags\n\\ No newline at end of file\n+    return tags\r\n+\r\n+def add_collection(conn, name, tag):\r\n+    with lock:\r\n+        c = conn.cursor()\r\n+        c.execute(\"INSERT OR IGNORE INTO collections (name, tag) VALUES (?, ?)\", (name, tag))\r\n+        conn.commit()\r\n+\r\n+def get_collections(conn):\r\n+    with lock:\r\n+        c = conn.cursor()\r\n+        c.execute(\"SELECT name, tag FROM collections\")\r\n+        collections = [{'name': row[0], 'tag': row[1]} for row in c.fetchall()]\r\n+    return collections\n\\ No newline at end of file\n"
                },
                {
                    "date": 1756950589751,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,8 +3,10 @@\n import sqlite3\r\n from datetime import datetime, timedelta\r\n import hashlib\r\n from utils import lock\r\n+import shutil\r\n+from config import FAISS_PATH\r\n \r\n def init_db():\r\n     print(\"Initializing database...\")\r\n     conn = sqlite3.connect('crawled.db', check_same_thread=False)\r\n@@ -88,5 +90,24 @@\n     with lock:\r\n         c = conn.cursor()\r\n         c.execute(\"SELECT name, tag FROM collections\")\r\n         collections = [{'name': row[0], 'tag': row[1]} for row in c.fetchall()]\r\n-    return collections\n\\ No newline at end of file\n+    return collections\r\n+\r\n+def rename_collection(conn, old_name, new_name):\r\n+    with lock:\r\n+        c = conn.cursor()\r\n+        c.execute(\"UPDATE collections SET name = ? WHERE name = ?\", (new_name, old_name))\r\n+        conn.commit()\r\n+    print(f\"Renamed collection from {old_name} to {new_name}\")\r\n+\r\n+def delete_collection(conn, name, tag):\r\n+    with lock:\r\n+        c = conn.cursor()\r\n+        c.execute(\"DELETE FROM collections WHERE name = ?\", (name,))\r\n+        c.execute(\"DELETE FROM chunks WHERE tag = ?\", (tag,))\r\n+        conn.commit()\r\n+    # Delete FAISS folder\r\n+    tag_path = os.path.join(FAISS_PATH, tag)\r\n+    if os.path.exists(tag_path):\r\n+        shutil.rmtree(tag_path)\r\n+    print(f\"Deleted collection {name} with tag {tag}\")\n\\ No newline at end of file\n"
                },
                {
                    "date": 1756967447355,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,9 +7,9 @@\n import shutil\r\n from config import FAISS_PATH\r\n \r\n def init_db():\r\n-    print(\"Initializing database...\")\r\n+    print(\"Debug: Initializing database...\")\r\n     conn = sqlite3.connect('crawled.db', check_same_thread=False)\r\n     c = conn.cursor()\r\n     c.execute('''CREATE TABLE IF NOT EXISTS urls\r\n                  (url TEXT PRIMARY KEY, timestamp DATETIME, cleaned_text TEXT)''')\r\n@@ -19,59 +19,59 @@\n                  (name TEXT PRIMARY KEY, tag TEXT)''')\r\n     # Add tag column if not exists (for migration)\r\n     try:\r\n         c.execute(\"ALTER TABLE chunks ADD COLUMN tag TEXT\")\r\n-        print(\"Added 'tag' column to chunks table.\")\r\n+        print(\"Debug: Added 'tag' column to chunks table.\")\r\n     except sqlite3.OperationalError as e:\r\n         if \"duplicate column name\" not in str(e):\r\n             raise e\r\n-        print(\"'tag' column already exists in chunks table.\")\r\n+        print(\"Debug: 'tag' column already exists in chunks table.\")\r\n     conn.commit()\r\n-    print(\"Database initialized.\")\r\n+    print(\"Debug: Database initialized.\")\r\n     return conn\r\n \r\n def get_stored_content(conn, url):\r\n-    print(f\"Checking stored content for URL: {url}\")\r\n+    print(f\"Debug: Checking stored content for URL: {url}\")\r\n     with lock:\r\n         c = conn.cursor()\r\n         c.execute(\"SELECT cleaned_text, timestamp FROM urls WHERE url = ?\", (url,))\r\n         result = c.fetchone()\r\n         if result:\r\n             text, ts_str = result\r\n             ts = datetime.fromisoformat(ts_str)\r\n             if datetime.now() - ts < timedelta(days=1):\r\n-                print(f\"Found recent stored content for {url}\")\r\n+                print(f\"Debug: Found recent stored content for {url}\")\r\n                 return text\r\n             else:\r\n-                print(f\"Stored content for {url} is outdated.\")\r\n+                print(f\"Debug: Stored content for {url} is outdated. Will fetch new content.\")\r\n         else:\r\n-            print(f\"No stored content found for {url}. Processing now...\")\r\n+            print(f\"Debug: No stored content found for {url}. Will fetch and process new content.\")\r\n     return None\r\n \r\n def store_content(conn, url, cleaned_text):\r\n-    print(f\"Storing content for URL: {url}\")\r\n+    print(f\"Debug: Storing content for URL: {url}\")\r\n     ts = datetime.now().isoformat()\r\n     with lock:\r\n         c = conn.cursor()\r\n-        c.execute(\"INSERT OR REPLACE INTO urls (url, timestamp, cleaned_text) VALUES (?, ?, ?)\",\r\n+        c.execute(\"INSERT OR REPLACE INTO urls (url, timestamp, cleaned_text) VALUES (?, ?, ?) \",\r\n                   (url, ts, cleaned_text))\r\n         conn.commit()\r\n-    print(f\"Content stored for {url}\")\r\n+    print(f\"Debug: Content stored for {url}\")\r\n \r\n def add_chunk_if_new(conn, content, source, tag=None):\r\n-    print(f\"Adding new chunk if not exists for source: {source}, tag: {tag}\")\r\n+    print(f\"Debug: Adding new chunk if not exists for source: {source}, tag: {tag}\")\r\n     chunk_hash = hashlib.sha256(content.encode()).hexdigest()\r\n     with lock:\r\n         c = conn.cursor()\r\n         c.execute(\"SELECT hash FROM chunks WHERE hash = ?\", (chunk_hash,))\r\n         if not c.fetchone():\r\n             c.execute(\"INSERT INTO chunks (hash, content, source, tag) VALUES (?, ?, ?, ?)\",\r\n                       (chunk_hash, content, source, tag))\r\n             conn.commit()\r\n-            print(\"New chunk added.\")\r\n+            print(\"Debug: New chunk added.\")\r\n             return True\r\n         else:\r\n-            print(\"Chunk already exists.\")\r\n+            print(\"Debug: Chunk already exists.\")\r\n     return False\r\n \r\n def get_unique_tags(conn):\r\n     with lock:\r\n@@ -97,9 +97,9 @@\n     with lock:\r\n         c = conn.cursor()\r\n         c.execute(\"UPDATE collections SET name = ? WHERE name = ?\", (new_name, old_name))\r\n         conn.commit()\r\n-    print(f\"Renamed collection from {old_name} to {new_name}\")\r\n+    print(f\"Debug: Renamed collection from {old_name} to {new_name}\")\r\n \r\n def delete_collection(conn, name, tag):\r\n     with lock:\r\n         c = conn.cursor()\r\n@@ -109,5 +109,5 @@\n     # Delete FAISS folder\r\n     tag_path = os.path.join(FAISS_PATH, tag)\r\n     if os.path.exists(tag_path):\r\n         shutil.rmtree(tag_path)\r\n-    print(f\"Deleted collection {name} with tag {tag}\")\n\\ No newline at end of file\n+    print(f\"Debug: Deleted collection {name} with tag {tag}\")\n\\ No newline at end of file\n"
                }
            ],
            "date": 1756856970798,
            "name": "Commit-0",
            "content": "import sqlite3\r\nfrom datetime import datetime, timedelta\r\nimport hashlib\r\nfrom utils import lock\r\n\r\ndef init_db():\r\n    print(\"Initializing database...\")\r\n    conn = sqlite3.connect('crawled.db', check_same_thread=False)\r\n    c = conn.cursor()\r\n    c.execute('''CREATE TABLE IF NOT EXISTS urls\r\n                 (url TEXT PRIMARY KEY, timestamp DATETIME, cleaned_text TEXT)''')\r\n    c.execute('''CREATE TABLE IF NOT EXISTS chunks\r\n                 (hash TEXT PRIMARY KEY, content TEXT, source TEXT)''')\r\n    conn.commit()\r\n    print(\"Database initialized.\")\r\n    return conn\r\n\r\ndef get_stored_content(conn, url):\r\n    print(f\"Checking stored content for URL: {url}\")\r\n    with lock:\r\n        c = conn.cursor()\r\n        c.execute(\"SELECT cleaned_text, timestamp FROM urls WHERE url = ?\", (url,))\r\n        result = c.fetchone()\r\n        if result:\r\n            text, ts_str = result\r\n            ts = datetime.fromisoformat(ts_str)\r\n            if datetime.now() - ts < timedelta(days=1):\r\n                print(f\"Found recent stored content for {url}\")\r\n                return text\r\n            else:\r\n                print(f\"Stored content for {url} is outdated.\")\r\n        else:\r\n            print(f\"No stored content found for {url}\")\r\n    return None\r\n\r\ndef store_content(conn, url, cleaned_text):\r\n    print(f\"Storing content for URL: {url}\")\r\n    ts = datetime.now().isoformat()\r\n    with lock:\r\n        c = conn.cursor()\r\n        c.execute(\"INSERT OR REPLACE INTO urls (url, timestamp, cleaned_text) VALUES (?, ?, ?)\",\r\n                  (url, ts, cleaned_text))\r\n        conn.commit()\r\n    print(f\"Content stored for {url}\")\r\n\r\ndef add_chunk_if_new(conn, content, source):\r\n    print(f\"Adding new chunk if not exists for source: {source}\")\r\n    chunk_hash = hashlib.sha256(content.encode()).hexdigest()\r\n    with lock:\r\n        c = conn.cursor()\r\n        c.execute(\"SELECT hash FROM chunks WHERE hash = ?\", (chunk_hash,))\r\n        if not c.fetchone():\r\n            c.execute(\"INSERT INTO chunks (hash, content, source) VALUES (?, ?, ?)\",\r\n                      (chunk_hash, content, source))\r\n            conn.commit()\r\n            print(\"New chunk added.\")\r\n            return True\r\n        else:\r\n            print(\"Chunk already exists.\")\r\n    return False"
        }
    ]
}