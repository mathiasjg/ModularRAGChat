{
    "sourceFile": "yttranscript.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 4,
            "patches": [
                {
                    "date": 1756925634667,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1756925865278,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,13 +17,11 @@\n \r\n def download_all_transcripts(url):\r\n     video_id = get_video_id(url)\r\n     print(f\"Extracted video ID: {video_id}\")\r\n-\r\n     try:\r\n-        transcript_list = YouTubeTranscriptApi.list_transcripts(video_id)\r\n+        transcript_list = YouTubeTranscriptApi().list(video_id)\r\n         print(f\"Found {len(transcript_list)} transcripts available.\")\r\n-\r\n         for transcript in transcript_list:\r\n             try:\r\n                 data = transcript.fetch()\r\n                 text = '\\n'.join([item['text'] for item in data])\r\n@@ -33,9 +31,8 @@\n                     f.write(text)\r\n                 print(f\"Saved transcript for language '{transcript.language}' ({language_code}) to {file_name}\")\r\n             except Exception as e:\r\n                 print(f\"Error fetching transcript for {transcript.language}: {e}\")\r\n-\r\n     except (NoTranscriptFound, TranscriptsDisabled) as e:\r\n         print(f\"No transcripts available: {e}\")\r\n     except Exception as e:\r\n         print(f\"Error listing transcripts: {e}\")\r\n"
                },
                {
                    "date": 1756925964018,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,25 +18,20 @@\n def download_all_transcripts(url):\r\n     video_id = get_video_id(url)\r\n     print(f\"Extracted video ID: {video_id}\")\r\n     try:\r\n-        transcript_list = YouTubeTranscriptApi().list(video_id)\r\n-        print(f\"Found {len(transcript_list)} transcripts available.\")\r\n-        for transcript in transcript_list:\r\n-            try:\r\n-                data = transcript.fetch()\r\n-                text = '\\n'.join([item['text'] for item in data])\r\n-                language_code = transcript.language_code\r\n-                file_name = f\"transcript_{language_code}.txt\"\r\n-                with open(file_name, 'w', encoding='utf-8') as f:\r\n-                    f.write(text)\r\n-                print(f\"Saved transcript for language '{transcript.language}' ({language_code}) to {file_name}\")\r\n-            except Exception as e:\r\n-                print(f\"Error fetching transcript for {transcript.language}: {e}\")\r\n+        # Use get_transcript for English, as list_transcripts may not be available in older versions\r\n+        data = YouTubeTranscriptApi.get_transcript(video_id, languages=['en'])\r\n+        text = '\\n'.join([item['text'] for item in data])\r\n+        language_code = 'en'\r\n+        file_name = f\"transcript_{language_code}.txt\"\r\n+        with open(file_name, 'w', encoding='utf-8') as f:\r\n+            f.write(text)\r\n+        print(f\"Saved transcript for language 'English' ({language_code}) to {file_name}\")\r\n     except (NoTranscriptFound, TranscriptsDisabled) as e:\r\n         print(f\"No transcripts available: {e}\")\r\n     except Exception as e:\r\n-        print(f\"Error listing transcripts: {e}\")\r\n+        print(f\"Error fetching transcript: {e}\")\r\n \r\n # Example usage\r\n video_url = \"https://www.youtube.com/watch?v=VxOQjqNgQ5E\"\r\n download_all_transcripts(video_url)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1756926067381,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,10 +18,11 @@\n def download_all_transcripts(url):\r\n     video_id = get_video_id(url)\r\n     print(f\"Extracted video ID: {video_id}\")\r\n     try:\r\n-        # Use get_transcript for English, as list_transcripts may not be available in older versions\r\n-        data = YouTubeTranscriptApi.get_transcript(video_id, languages=['en'])\r\n+        # Use fetch for English, as per documentation\r\n+        ytt_api = YouTubeTranscriptApi()\r\n+        data = ytt_api.fetch(video_id, languages=['en'])\r\n         text = '\\n'.join([item['text'] for item in data])\r\n         language_code = 'en'\r\n         file_name = f\"transcript_{language_code}.txt\"\r\n         with open(file_name, 'w', encoding='utf-8') as f:\r\n"
                },
                {
                    "date": 1756926502918,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,21 +18,26 @@\n def download_all_transcripts(url):\r\n     video_id = get_video_id(url)\r\n     print(f\"Extracted video ID: {video_id}\")\r\n     try:\r\n-        # Use fetch for English, as per documentation\r\n         ytt_api = YouTubeTranscriptApi()\r\n-        data = ytt_api.fetch(video_id, languages=['en'])\r\n-        text = '\\n'.join([item['text'] for item in data])\r\n-        language_code = 'en'\r\n-        file_name = f\"transcript_{language_code}.txt\"\r\n-        with open(file_name, 'w', encoding='utf-8') as f:\r\n-            f.write(text)\r\n-        print(f\"Saved transcript for language 'English' ({language_code}) to {file_name}\")\r\n+        transcript_list = ytt_api.list(video_id)\r\n+        print(f\"Found {len(transcript_list)} transcripts available.\")\r\n+        for transcript in transcript_list:\r\n+            try:\r\n+                data = transcript.fetch()\r\n+                text = '\\n'.join([item['text'] for item in data])\r\n+                language_code = transcript.language_code\r\n+                file_name = f\"transcript_{language_code}.txt\"\r\n+                with open(file_name, 'w', encoding='utf-8') as f:\r\n+                    f.write(text)\r\n+                print(f\"Saved transcript for language '{transcript.language}' ({language_code}) to {file_name}\")\r\n+            except Exception as e:\r\n+                print(f\"Error fetching transcript for {transcript.language}: {e}\")\r\n     except (NoTranscriptFound, TranscriptsDisabled) as e:\r\n         print(f\"No transcripts available: {e}\")\r\n     except Exception as e:\r\n-        print(f\"Error fetching transcript: {e}\")\r\n+        print(f\"Error listing transcripts: {e}\")\r\n \r\n # Example usage\r\n video_url = \"https://www.youtube.com/watch?v=VxOQjqNgQ5E\"\r\n download_all_transcripts(video_url)\n\\ No newline at end of file\n"
                }
            ],
            "date": 1756925634667,
            "name": "Commit-0",
            "content": "from youtube_transcript_api import YouTubeTranscriptApi, NoTranscriptFound, TranscriptsDisabled\r\nfrom urllib.parse import urlparse, parse_qs\r\nimport os\r\n\r\ndef get_video_id(url):\r\n    parsed_url = urlparse(url)\r\n    if parsed_url.hostname == 'youtu.be':\r\n        return parsed_url.path[1:]\r\n    if parsed_url.hostname in ('www.youtube.com', 'youtube.com'):\r\n        if parsed_url.path == '/watch':\r\n            return parse_qs(parsed_url.query)['v'][0]\r\n        if parsed_url.path.startswith('/embed/'):\r\n            return parsed_url.path.split('/')[2]\r\n        if parsed_url.path.startswith('/v/'):\r\n            return parsed_url.path.split('/')[2]\r\n    raise ValueError(\"Invalid YouTube URL\")\r\n\r\ndef download_all_transcripts(url):\r\n    video_id = get_video_id(url)\r\n    print(f\"Extracted video ID: {video_id}\")\r\n\r\n    try:\r\n        transcript_list = YouTubeTranscriptApi.list_transcripts(video_id)\r\n        print(f\"Found {len(transcript_list)} transcripts available.\")\r\n\r\n        for transcript in transcript_list:\r\n            try:\r\n                data = transcript.fetch()\r\n                text = '\\n'.join([item['text'] for item in data])\r\n                language_code = transcript.language_code\r\n                file_name = f\"transcript_{language_code}.txt\"\r\n                with open(file_name, 'w', encoding='utf-8') as f:\r\n                    f.write(text)\r\n                print(f\"Saved transcript for language '{transcript.language}' ({language_code}) to {file_name}\")\r\n            except Exception as e:\r\n                print(f\"Error fetching transcript for {transcript.language}: {e}\")\r\n\r\n    except (NoTranscriptFound, TranscriptsDisabled) as e:\r\n        print(f\"No transcripts available: {e}\")\r\n    except Exception as e:\r\n        print(f\"Error listing transcripts: {e}\")\r\n\r\n# Example usage\r\nvideo_url = \"https://www.youtube.com/watch?v=VxOQjqNgQ5E\"\r\ndownload_all_transcripts(video_url)"
        }
    ]
}