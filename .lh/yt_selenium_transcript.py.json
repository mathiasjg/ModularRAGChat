{
    "sourceFile": "yt_selenium_transcript.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 16,
            "patches": [
                {
                    "date": 1756926556002,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1756926702529,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,14 +4,16 @@\n from selenium.webdriver.support.ui import WebDriverWait\r\n from selenium.webdriver.support import expected_conditions as EC\r\n from selenium.common.exceptions import TimeoutException, NoSuchElementException\r\n from webdriver_manager.chrome import ChromeDriverManager\r\n+from selenium.webdriver.chrome.service import Service as ChromeService\r\n import time\r\n \r\n def main(url):\r\n     print(\"Step 1: Setting up Chrome driver...\")\r\n     # Use webdriver-manager to automatically download and install chromedriver\r\n-    driver = webdriver.Chrome(ChromeDriverManager().install())\r\n+    service = ChromeService(ChromeDriverManager().install())\r\n+    driver = webdriver.Chrome(service=service)\r\n     wait = WebDriverWait(driver, 30)\r\n \r\n     try:\r\n         print(\"Step 2: Opening browser and navigating to URL...\")\r\n"
                },
                {
                    "date": 1756927313731,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,8 +25,9 @@\n             print(\"Step 3: Checking for cookies acceptance button...\")\r\n             accept_button = wait.until(EC.element_to_be_clickable((By.XPATH, \"//button[contains(text(), 'Accept all')]\")))\r\n             accept_button.click()\r\n             print(\"Debug: Accepted cookies.\")\r\n+            time.sleep(2)  # Allow page to settle\r\n         except TimeoutException:\r\n             print(\"Debug: No cookies button found or timed out. Continuing...\")\r\n \r\n         # Step 4: Expand description if needed\r\n@@ -34,8 +35,9 @@\n             print(\"Step 4: Expanding description...\")\r\n             description_expander = wait.until(EC.element_to_be_clickable((By.ID, \"description-inline-expander\")))\r\n             description_expander.click()\r\n             print(\"Debug: Description expanded.\")\r\n+            time.sleep(2)  # Allow expansion\r\n         except TimeoutException:\r\n             print(\"Debug: No description expander found or already expanded.\")\r\n \r\n         # Step 5: Click 'Show transcript' button in description\r\n@@ -43,26 +45,29 @@\n             print(\"Step 5: Clicking 'Show transcript' button...\")\r\n             transcript_button = wait.until(EC.element_to_be_clickable((By.XPATH, \"//tp-yt-paper-button[contains(text(), 'Show transcript')]\")))\r\n             transcript_button.click()\r\n             print(\"Debug: Clicked 'Show transcript'.\")\r\n+            time.sleep(3)  # Allow transcript to load\r\n         except TimeoutException:\r\n             print(\"Debug: No 'Show transcript' button found in description. Trying alternative method...\")\r\n             # Fallback: Click more actions button\r\n             try:\r\n                 more_actions = wait.until(EC.element_to_be_clickable((By.XPATH, '//button[@aria-label=\"More actions\"]')))\r\n                 more_actions.click()\r\n                 print(\"Debug: Clicked 'More actions'.\")\r\n-                transcript_item = wait.until(EC.element_to_be_clickable((By.XPATH, '//tp-yt-paper-item[contains(text(), \"Show transcript\")]')))\r\n+                time.sleep(1)\r\n+                transcript_item = wait.until(EC.element_to_be_clickable((By.TAG_NAME, \"ytd-menu-service-item-renderer\")))\r\n                 transcript_item.click()\r\n                 print(\"Debug: Clicked 'Show transcript' from menu.\")\r\n+                time.sleep(3)  # Allow transcript to load\r\n             except TimeoutException:\r\n                 print(\"Error: Could not find 'Show transcript' option. Transcript may not be available.\")\r\n                 return None\r\n \r\n         # Step 6: Wait for transcript panel to load\r\n         print(\"Step 6: Waiting for transcript panel to load...\")\r\n         try:\r\n-            wait.until(EC.visibility_of_element_located((By.ID, \"panels\")))\r\n+            wait.until(EC.visibility_of_element_located((By.CSS_SELECTOR, \"ytd-transcript-segment-list-renderer\")))\r\n             print(\"Debug: Transcript panel loaded.\")\r\n         except TimeoutException:\r\n             print(\"Error: Transcript panel did not load.\")\r\n             return None\r\n"
                },
                {
                    "date": 1756927682136,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,9 @@\n from selenium import webdriver\r\n from selenium.webdriver.common.by import By\r\n from selenium.webdriver.support.ui import WebDriverWait\r\n from selenium.webdriver.support import expected_conditions as EC\r\n-from selenium.common.exceptions import TimeoutException, NoSuchElementException\r\n+from selenium.common.exceptions import TimeoutException, NoSuchElementException, ElementClickInterceptedException\r\n from webdriver_manager.chrome import ChromeDriverManager\r\n from selenium.webdriver.chrome.service import Service as ChromeService\r\n import time\r\n \r\n@@ -18,63 +18,73 @@\n     try:\r\n         print(\"Step 2: Opening browser and navigating to URL...\")\r\n         driver.get(url)\r\n         print(f\"Debug: Navigated to {url}. Current title: {driver.title}\")\r\n+        time.sleep(2)  # Allow page to fully load\r\n \r\n-        # Step 3: Handle cookies popup if present\r\n+        # Step 3: Expand description (\"...more\")\r\n         try:\r\n-            print(\"Step 3: Checking for cookies acceptance button...\")\r\n-            accept_button = wait.until(EC.element_to_be_clickable((By.XPATH, \"//button[contains(text(), 'Accept all')]\")))\r\n-            accept_button.click()\r\n-            print(\"Debug: Accepted cookies.\")\r\n-            time.sleep(2)  # Allow page to settle\r\n-        except TimeoutException:\r\n-            print(\"Debug: No cookies button found or timed out. Continuing...\")\r\n-\r\n-        # Step 4: Expand description if needed\r\n-        try:\r\n-            print(\"Step 4: Expanding description...\")\r\n-            description_expander = wait.until(EC.element_to_be_clickable((By.ID, \"description-inline-expander\")))\r\n-            description_expander.click()\r\n+            print(\"Step 3: Expanding description ('...more')...\")\r\n+            expander_xpath = \"//ytd-text-inline-expander[@id='description-inline-expander']//tp-yt-paper-button[@id='expand']\"\r\n+            description_expander = wait.until(EC.element_to_be_clickable((By.XPATH, expander_xpath)))\r\n+            try:\r\n+                description_expander.click()\r\n+            except ElementClickInterceptedException:\r\n+                print(\"Debug: Click intercepted on expander. Using JavaScript to click...\")\r\n+                driver.execute_script(\"arguments[0].click();\", description_expander)\r\n             print(\"Debug: Description expanded.\")\r\n-            time.sleep(2)  # Allow expansion\r\n+            time.sleep(3)  # Allow expansion and elements to appear\r\n         except TimeoutException:\r\n             print(\"Debug: No description expander found or already expanded.\")\r\n \r\n-        # Step 5: Click 'Show transcript' button in description\r\n+        # Step 4: Click 'Show transcript' button\r\n         try:\r\n-            print(\"Step 5: Clicking 'Show transcript' button...\")\r\n-            transcript_button = wait.until(EC.element_to_be_clickable((By.XPATH, \"//tp-yt-paper-button[contains(text(), 'Show transcript')]\")))\r\n-            transcript_button.click()\r\n+            print(\"Step 4: Clicking 'Show transcript' button...\")\r\n+            transcript_button_xpath = \"//ytd-structured-description-content-renderer[@id='structured-description']//ytd-video-description-transcript-section-renderer[@class='style-scope ytd-structured-description-content-renderer']//div[@class='yt-spec-touch-feedback-shape__fill']\"\r\n+            transcript_button = wait.until(EC.element_to_be_clickable((By.XPATH, transcript_button_xpath)))\r\n+            try:\r\n+                transcript_button.click()\r\n+            except ElementClickInterceptedException:\r\n+                print(\"Debug: Click intercepted on transcript button. Using JavaScript to click...\")\r\n+                driver.execute_script(\"arguments[0].click();\", transcript_button)\r\n             print(\"Debug: Clicked 'Show transcript'.\")\r\n             time.sleep(3)  # Allow transcript to load\r\n         except TimeoutException:\r\n-            print(\"Debug: No 'Show transcript' button found in description. Trying alternative method...\")\r\n+            print(\"Debug: No 'Show transcript' button found. Trying fallback method...\")\r\n             # Fallback: Click more actions button\r\n             try:\r\n                 more_actions = wait.until(EC.element_to_be_clickable((By.XPATH, '//button[@aria-label=\"More actions\"]')))\r\n-                more_actions.click()\r\n+                try:\r\n+                    more_actions.click()\r\n+                except ElementClickInterceptedException:\r\n+                    print(\"Debug: Click intercepted on more actions. Using JavaScript to click...\")\r\n+                    driver.execute_script(\"arguments[0].click();\", more_actions)\r\n                 print(\"Debug: Clicked 'More actions'.\")\r\n                 time.sleep(1)\r\n-                transcript_item = wait.until(EC.element_to_be_clickable((By.TAG_NAME, \"ytd-menu-service-item-renderer\")))\r\n-                transcript_item.click()\r\n+                transcript_item = wait.until(EC.element_to_be_clickable((By.XPATH, '//tp-yt-paper-item[contains(text(), \"Show transcript\")]')))\r\n+                try:\r\n+                    transcript_item.click()\r\n+                except ElementClickInterceptedException:\r\n+                    print(\"Debug: Click intercepted on transcript item. Using JavaScript to click...\")\r\n+                    driver.execute_script(\"arguments[0].click();\", transcript_item)\r\n                 print(\"Debug: Clicked 'Show transcript' from menu.\")\r\n                 time.sleep(3)  # Allow transcript to load\r\n             except TimeoutException:\r\n                 print(\"Error: Could not find 'Show transcript' option. Transcript may not be available.\")\r\n                 return None\r\n \r\n-        # Step 6: Wait for transcript panel to load\r\n-        print(\"Step 6: Waiting for transcript panel to load...\")\r\n+        # Step 5: Wait for transcript panel to load\r\n+        print(\"Step 5: Waiting for transcript panel to load...\")\r\n         try:\r\n-            wait.until(EC.visibility_of_element_located((By.CSS_SELECTOR, \"ytd-transcript-segment-list-renderer\")))\r\n+            wait.until(EC.visibility_of_element_located((By.ID, \"panels\")))\r\n             print(\"Debug: Transcript panel loaded.\")\r\n+            time.sleep(2)  # Ensure content is rendered\r\n         except TimeoutException:\r\n             print(\"Error: Transcript panel did not load.\")\r\n             return None\r\n \r\n-        # Step 7: Extract transcript text\r\n-        print(\"Step 7: Extracting transcript text...\")\r\n+        # Step 6: Extract transcript text\r\n+        print(\"Step 6: Extracting transcript text...\")\r\n         try:\r\n             transcript_elements = driver.find_elements(By.CSS_SELECTOR, \".ytd-transcript-segment-renderer .ytd-transcript-segment-text\")\r\n             if not transcript_elements:\r\n                 print(\"Debug: No elements with primary selector. Trying alternative...\")\r\n@@ -89,10 +99,10 @@\n             print(\"Error: Transcript elements not found.\")\r\n             return None\r\n \r\n     finally:\r\n-        # Step 8: Close the browser\r\n-        print(\"Step 8: Closing browser...\")\r\n+        # Step 7: Close the browser\r\n+        print(\"Step 7: Closing browser...\")\r\n         time.sleep(5)  # Pause to allow viewing the browser\r\n         driver.quit()\r\n         print(\"Debug: Browser closed.\")\r\n \r\n"
                },
                {
                    "date": 1756927889997,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,9 +48,9 @@\n                 driver.execute_script(\"arguments[0].click();\", transcript_button)\r\n             print(\"Debug: Clicked 'Show transcript'.\")\r\n             time.sleep(3)  # Allow transcript to load\r\n         except TimeoutException:\r\n-            print(\"Debug: No 'Show transcript' button found. Trying fallback method...\")\r\n+            print(\"Debug: No 'Show transcript' button found in description. Trying alternative method...\")\r\n             # Fallback: Click more actions button\r\n             try:\r\n                 more_actions = wait.until(EC.element_to_be_clickable((By.XPATH, '//button[@aria-label=\"More actions\"]')))\r\n                 try:\r\n@@ -74,21 +74,25 @@\n \r\n         # Step 5: Wait for transcript panel to load\r\n         print(\"Step 5: Waiting for transcript panel to load...\")\r\n         try:\r\n-            wait.until(EC.visibility_of_element_located((By.ID, \"panels\")))\r\n-            print(\"Debug: Transcript panel loaded.\")\r\n+            transcript_title_xpath = \"//ytd-engagement-panel-section-list-renderer[@target-id='engagement-panel-searchable-transcript']//yt-formatted-string[@id='title-text']\"\r\n+            wait.until(EC.visibility_of_element_located((By.XPATH, transcript_title_xpath)))\r\n+            print(\"Debug: Transcript panel loaded (title visible).\")\r\n             time.sleep(2)  # Ensure content is rendered\r\n         except TimeoutException:\r\n-            print(\"Error: Transcript panel did not load.\")\r\n+            print(\"Error: Transcript panel did not load (title not found).\")\r\n             return None\r\n \r\n         # Step 6: Extract transcript text\r\n         print(\"Step 6: Extracting transcript text...\")\r\n         try:\r\n-            transcript_elements = driver.find_elements(By.CSS_SELECTOR, \".ytd-transcript-segment-renderer .ytd-transcript-segment-text\")\r\n+            transcript_container_xpath = \"//ytd-engagement-panel-section-list-renderer[@target-id='engagement-panel-searchable-transcript']\"\r\n+            wait.until(EC.presence_of_element_located((By.XPATH, transcript_container_xpath)))\r\n+            print(\"Debug: Transcript container located.\")\r\n+            transcript_elements = driver.find_elements(By.XPATH, f\"{transcript_container_xpath}//div[@aria-label]\")\r\n             if not transcript_elements:\r\n-                print(\"Debug: No elements with primary selector. Trying alternative...\")\r\n+                print(\"Debug: No elements with aria-label selector. Trying alternative...\")\r\n                 transcript_elements = driver.find_elements(By.CSS_SELECTOR, \".cue.style-scope.ytd-transcript-body-renderer\")\r\n             if not transcript_elements:\r\n                 print(\"Error: No transcript elements found.\")\r\n                 return None\r\n"
                },
                {
                    "date": 1756928337297,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,8 +6,10 @@\n from selenium.common.exceptions import TimeoutException, NoSuchElementException, ElementClickInterceptedException\r\n from webdriver_manager.chrome import ChromeDriverManager\r\n from selenium.webdriver.chrome.service import Service as ChromeService\r\n import time\r\n+import spacy\r\n+import requests\r\n \r\n def main(url):\r\n     print(\"Step 1: Setting up Chrome driver...\")\r\n     # Use webdriver-manager to automatically download and install chromedriver\r\n@@ -85,36 +87,98 @@\n \r\n         # Step 6: Extract transcript text\r\n         print(\"Step 6: Extracting transcript text...\")\r\n         try:\r\n-            transcript_container_xpath = \"//ytd-engagement-panel-section-list-renderer[@target-id='engagement-panel-searchable-transcript']\"\r\n-            wait.until(EC.presence_of_element_located((By.XPATH, transcript_container_xpath)))\r\n-            print(\"Debug: Transcript container located.\")\r\n-            transcript_elements = driver.find_elements(By.XPATH, f\"{transcript_container_xpath}//div[@aria-label]\")\r\n+            transcript_elements = driver.find_elements(By.CSS_SELECTOR, \".ytd-transcript-segment-renderer .ytd-transcript-segment-text\")\r\n             if not transcript_elements:\r\n-                print(\"Debug: No elements with aria-label selector. Trying alternative...\")\r\n+                print(\"Debug: No elements with primary selector. Trying alternative...\")\r\n                 transcript_elements = driver.find_elements(By.CSS_SELECTOR, \".cue.style-scope.ytd-transcript-body-renderer\")\r\n             if not transcript_elements:\r\n                 print(\"Error: No transcript elements found.\")\r\n                 return None\r\n             transcript_text = '\\n'.join([elem.text.strip() for elem in transcript_elements if elem.text.strip()])\r\n             print(f\"Debug: Extracted {len(transcript_elements)} lines of transcript.\")\r\n-            return transcript_text\r\n         except NoSuchElementException:\r\n             print(\"Error: Transcript elements not found.\")\r\n             return None\r\n \r\n+        # Step 7: NLP Processing\r\n+        print(\"Step 7: Processing transcript with NLP...\")\r\n+        try:\r\n+            # Load spaCy model (assume 'en_core_web_sm' is installed)\r\n+            nlp = spacy.load(\"en_core_web_sm\")\r\n+            doc = nlp(transcript_text)\r\n+            \r\n+            # NLP steps: Tokenization, Lemmatization, Remove stop words and punctuation\r\n+            processed_tokens = [token.lemma_ for token in doc if not token.is_stop and not token.is_punct and token.text.strip()]\r\n+            processed_text = ' '.join(processed_tokens)\r\n+            \r\n+            # Entity recognition (optional enhancement)\r\n+            entities = [(ent.text, ent.label_) for ent in doc.ents]\r\n+            print(f\"Debug: Extracted {len(entities)} entities (e.g., {entities[:5]}...)\")\r\n+\r\n+            # Chunking for RAG: Split into sentences\r\n+            sentences = [sent.text.strip() for sent in doc.sents if sent.text.strip()]\r\n+            chunk_size = 200  # Words per chunk for RAG\r\n+            chunks = []\r\n+            current_chunk = []\r\n+            current_word_count = 0\r\n+            for sent in sentences:\r\n+                word_count = len(sent.split())\r\n+                if current_word_count + word_count > chunk_size:\r\n+                    chunks.append(' '.join(current_chunk))\r\n+                    current_chunk = [sent]\r\n+                    current_word_count = word_count\r\n+                else:\r\n+                    current_chunk.append(sent)\r\n+                    current_word_count += word_count\r\n+            if current_chunk:\r\n+                chunks.append(' '.join(current_chunk))\r\n+            print(f\"Debug: Created {len(chunks)} chunks for RAG.\")\r\n+\r\n+            # Optional Ollama enhancement (assume Ollama running locally with 'llama2' model)\r\n+            ollama_url = \"http://localhost:11434/api/generate\"\r\n+            enhanced_chunks = []\r\n+            for chunk in chunks:\r\n+                payload = {\r\n+                    \"model\": \"llama2\",\r\n+                    \"prompt\": f\"Enhance and correct this transcript chunk for clarity and accuracy: {chunk}\",\r\n+                    \"stream\": False\r\n+                }\r\n+                response = requests.post(ollama_url, json=payload)\r\n+                if response.status_code == 200:\r\n+                    enhanced_text = response.json()['response']\r\n+                    enhanced_chunks.append(enhanced_text)\r\n+                    print(\"Debug: Enhanced chunk with Ollama.\")\r\n+                else:\r\n+                    print(f\"Error enhancing with Ollama: {response.text}\")\r\n+                    enhanced_chunks.append(chunk)  # Fallback to original\r\n+            processed_text = '\\n\\n'.join(enhanced_chunks)\r\n+\r\n+            # Save to processed txt file\r\n+            output_file = \"processed_transcript.txt\"\r\n+            with open(output_file, 'w', encoding='utf-8') as f:\r\n+                f.write(processed_text)\r\n+            print(f\"Debug: Saved processed transcript to {output_file}\")\r\n+            return processed_text\r\n+        except ImportError:\r\n+            print(\"Error: spaCy not installed. Skipping NLP.\")\r\n+            return transcript_text\r\n+        except Exception as e:\r\n+            print(f\"Error in NLP processing: {e}\")\r\n+            return transcript_text\r\n+\r\n     finally:\r\n-        # Step 7: Close the browser\r\n-        print(\"Step 7: Closing browser...\")\r\n+        # Step 8: Close the browser\r\n+        print(\"Step 8: Closing browser...\")\r\n         time.sleep(5)  # Pause to allow viewing the browser\r\n         driver.quit()\r\n         print(\"Debug: Browser closed.\")\r\n \r\n # Example usage\r\n video_url = \"https://www.youtube.com/watch?v=VxOQjqNgQ5E\"\r\n transcript = main(video_url)\r\n if transcript:\r\n-    print(\"Extracted Transcript:\\n\")\r\n+    print(\"Extracted and Processed Transcript:\\n\")\r\n     print(transcript)\r\n else:\r\n     print(\"Failed to extract transcript.\")\n\\ No newline at end of file\n"
                },
                {
                    "date": 1756928618470,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,10 +6,8 @@\n from selenium.common.exceptions import TimeoutException, NoSuchElementException, ElementClickInterceptedException\r\n from webdriver_manager.chrome import ChromeDriverManager\r\n from selenium.webdriver.chrome.service import Service as ChromeService\r\n import time\r\n-import spacy\r\n-import requests\r\n \r\n def main(url):\r\n     print(\"Step 1: Setting up Chrome driver...\")\r\n     # Use webdriver-manager to automatically download and install chromedriver\r\n@@ -40,9 +38,10 @@\n \r\n         # Step 4: Click 'Show transcript' button\r\n         try:\r\n             print(\"Step 4: Clicking 'Show transcript' button...\")\r\n-            transcript_button_xpath = \"//ytd-structured-description-content-renderer[@id='structured-description']//ytd-video-description-transcript-section-renderer[@class='style-scope ytd-structured-description-content-renderer']//div[@class='yt-spec-touch-feedback-shape__fill']\"\r\n+            # Updated XPath for reliability based on provided full path\r\n+            transcript_button_xpath = \"//ytd-video-description-transcript-section-renderer//ytd-button-renderer/yt-button-shape/button\"\r\n             transcript_button = wait.until(EC.element_to_be_clickable((By.XPATH, transcript_button_xpath)))\r\n             try:\r\n                 transcript_button.click()\r\n             except ElementClickInterceptedException:\r\n@@ -96,89 +95,24 @@\n                 print(\"Error: No transcript elements found.\")\r\n                 return None\r\n             transcript_text = '\\n'.join([elem.text.strip() for elem in transcript_elements if elem.text.strip()])\r\n             print(f\"Debug: Extracted {len(transcript_elements)} lines of transcript.\")\r\n+            return transcript_text\r\n         except NoSuchElementException:\r\n             print(\"Error: Transcript elements not found.\")\r\n             return None\r\n \r\n-        # Step 7: NLP Processing\r\n-        print(\"Step 7: Processing transcript with NLP...\")\r\n-        try:\r\n-            # Load spaCy model (assume 'en_core_web_sm' is installed)\r\n-            nlp = spacy.load(\"en_core_web_sm\")\r\n-            doc = nlp(transcript_text)\r\n-            \r\n-            # NLP steps: Tokenization, Lemmatization, Remove stop words and punctuation\r\n-            processed_tokens = [token.lemma_ for token in doc if not token.is_stop and not token.is_punct and token.text.strip()]\r\n-            processed_text = ' '.join(processed_tokens)\r\n-            \r\n-            # Entity recognition (optional enhancement)\r\n-            entities = [(ent.text, ent.label_) for ent in doc.ents]\r\n-            print(f\"Debug: Extracted {len(entities)} entities (e.g., {entities[:5]}...)\")\r\n-\r\n-            # Chunking for RAG: Split into sentences\r\n-            sentences = [sent.text.strip() for sent in doc.sents if sent.text.strip()]\r\n-            chunk_size = 200  # Words per chunk for RAG\r\n-            chunks = []\r\n-            current_chunk = []\r\n-            current_word_count = 0\r\n-            for sent in sentences:\r\n-                word_count = len(sent.split())\r\n-                if current_word_count + word_count > chunk_size:\r\n-                    chunks.append(' '.join(current_chunk))\r\n-                    current_chunk = [sent]\r\n-                    current_word_count = word_count\r\n-                else:\r\n-                    current_chunk.append(sent)\r\n-                    current_word_count += word_count\r\n-            if current_chunk:\r\n-                chunks.append(' '.join(current_chunk))\r\n-            print(f\"Debug: Created {len(chunks)} chunks for RAG.\")\r\n-\r\n-            # Optional Ollama enhancement (assume Ollama running locally with 'llama2' model)\r\n-            ollama_url = \"http://localhost:11434/api/generate\"\r\n-            enhanced_chunks = []\r\n-            for chunk in chunks:\r\n-                payload = {\r\n-                    \"model\": \"llama2\",\r\n-                    \"prompt\": f\"Enhance and correct this transcript chunk for clarity and accuracy: {chunk}\",\r\n-                    \"stream\": False\r\n-                }\r\n-                response = requests.post(ollama_url, json=payload)\r\n-                if response.status_code == 200:\r\n-                    enhanced_text = response.json()['response']\r\n-                    enhanced_chunks.append(enhanced_text)\r\n-                    print(\"Debug: Enhanced chunk with Ollama.\")\r\n-                else:\r\n-                    print(f\"Error enhancing with Ollama: {response.text}\")\r\n-                    enhanced_chunks.append(chunk)  # Fallback to original\r\n-            processed_text = '\\n\\n'.join(enhanced_chunks)\r\n-\r\n-            # Save to processed txt file\r\n-            output_file = \"processed_transcript.txt\"\r\n-            with open(output_file, 'w', encoding='utf-8') as f:\r\n-                f.write(processed_text)\r\n-            print(f\"Debug: Saved processed transcript to {output_file}\")\r\n-            return processed_text\r\n-        except ImportError:\r\n-            print(\"Error: spaCy not installed. Skipping NLP.\")\r\n-            return transcript_text\r\n-        except Exception as e:\r\n-            print(f\"Error in NLP processing: {e}\")\r\n-            return transcript_text\r\n-\r\n     finally:\r\n-        # Step 8: Close the browser\r\n-        print(\"Step 8: Closing browser...\")\r\n+        # Step 7: Close the browser\r\n+        print(\"Step 7: Closing browser...\")\r\n         time.sleep(5)  # Pause to allow viewing the browser\r\n         driver.quit()\r\n         print(\"Debug: Browser closed.\")\r\n \r\n # Example usage\r\n video_url = \"https://www.youtube.com/watch?v=VxOQjqNgQ5E\"\r\n transcript = main(video_url)\r\n if transcript:\r\n-    print(\"Extracted and Processed Transcript:\\n\")\r\n+    print(\"Extracted Transcript:\\n\")\r\n     print(transcript)\r\n else:\r\n     print(\"Failed to extract transcript.\")\n\\ No newline at end of file\n"
                },
                {
                    "date": 1756928778100,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,10 +38,9 @@\n \r\n         # Step 4: Click 'Show transcript' button\r\n         try:\r\n             print(\"Step 4: Clicking 'Show transcript' button...\")\r\n-            # Updated XPath for reliability based on provided full path\r\n-            transcript_button_xpath = \"//ytd-video-description-transcript-section-renderer//ytd-button-renderer/yt-button-shape/button\"\r\n+            transcript_button_xpath = \"//ytd-structured-description-content-renderer[@id='structured-description']//ytd-video-description-transcript-section-renderer[@class='style-scope ytd-structured-description-content-renderer']//div[@class='yt-spec-touch-feedback-shape__fill']\"\r\n             transcript_button = wait.until(EC.element_to_be_clickable((By.XPATH, transcript_button_xpath)))\r\n             try:\r\n                 transcript_button.click()\r\n             except ElementClickInterceptedException:\r\n@@ -86,10 +85,15 @@\n \r\n         # Step 6: Extract transcript text\r\n         print(\"Step 6: Extracting transcript text...\")\r\n         try:\r\n-            transcript_elements = driver.find_elements(By.CSS_SELECTOR, \".ytd-transcript-segment-renderer .ytd-transcript-segment-text\")\r\n+            # Use provided XPath base to find all yt-formatted-string in transcript segments\r\n+            transcript_elements_xpath = \"//ytd-engagement-panel-section-list-renderer[@target-id='engagement-panel-searchable-transcript']//ytd-transcript-segment-renderer//yt-formatted-string\"\r\n+            transcript_elements = driver.find_elements(By.XPATH, transcript_elements_xpath)\r\n             if not transcript_elements:\r\n+                print(\"Debug: No elements with updated XPath. Trying fallback selector...\")\r\n+                transcript_elements = driver.find_elements(By.CSS_SELECTOR, \".ytd-transcript-segment-renderer .ytd-transcript-segment-text\")\r\n+            if not transcript_elements:\r\n                 print(\"Debug: No elements with primary selector. Trying alternative...\")\r\n                 transcript_elements = driver.find_elements(By.CSS_SELECTOR, \".cue.style-scope.ytd-transcript-body-renderer\")\r\n             if not transcript_elements:\r\n                 print(\"Error: No transcript elements found.\")\r\n"
                },
                {
                    "date": 1756928924197,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,9 +38,10 @@\n \r\n         # Step 4: Click 'Show transcript' button\r\n         try:\r\n             print(\"Step 4: Clicking 'Show transcript' button...\")\r\n-            transcript_button_xpath = \"//ytd-structured-description-content-renderer[@id='structured-description']//ytd-video-description-transcript-section-renderer[@class='style-scope ytd-structured-description-content-renderer']//div[@class='yt-spec-touch-feedback-shape__fill']\"\r\n+            # Updated XPath for reliability based on provided full path\r\n+            transcript_button_xpath = \"//ytd-video-description-transcript-section-renderer//ytd-button-renderer/yt-button-shape/button\"\r\n             transcript_button = wait.until(EC.element_to_be_clickable((By.XPATH, transcript_button_xpath)))\r\n             try:\r\n                 transcript_button.click()\r\n             except ElementClickInterceptedException:\r\n@@ -72,17 +73,17 @@\n                 print(\"Error: Could not find 'Show transcript' option. Transcript may not be available.\")\r\n                 return None\r\n \r\n         # Step 5: Wait for transcript panel to load\r\n-        print(\"Step 5: Waiting for transcript panel to load...\")\r\n-        try:\r\n-            transcript_title_xpath = \"//ytd-engagement-panel-section-list-renderer[@target-id='engagement-panel-searchable-transcript']//yt-formatted-string[@id='title-text']\"\r\n-            wait.until(EC.visibility_of_element_located((By.XPATH, transcript_title_xpath)))\r\n-            print(\"Debug: Transcript panel loaded (title visible).\")\r\n-            time.sleep(2)  # Ensure content is rendered\r\n-        except TimeoutException:\r\n-            print(\"Error: Transcript panel did not load (title not found).\")\r\n-            return None\r\n+                print(\"Step 5: Waiting for transcript panel to load...\")\r\n+                try:\r\n+                    transcript_title_xpath = \"//ytd-engagement-panel-section-list-renderer[@target-id='engagement-panel-searchable-transcript']//yt-formatted-string[@id='title-text']\"\r\n+                    wait.until(EC.visibility_of_element_located((By.XPATH, transcript_title_xpath)))\r\n+                    print(\"Debug: Transcript panel loaded (title visible).\")\r\n+                    time.sleep(2)  # Ensure content is rendered\r\n+                except TimeoutException:\r\n+                    print(\"Error: Transcript panel did not load (title not found).\")\r\n+                    return None\r\n \r\n         # Step 6: Extract transcript text\r\n         print(\"Step 6: Extracting transcript text...\")\r\n         try:\r\n"
                },
                {
                    "date": 1756928970187,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,18 +38,17 @@\n \r\n         # Step 4: Click 'Show transcript' button\r\n         try:\r\n             print(\"Step 4: Clicking 'Show transcript' button...\")\r\n-            # Updated XPath for reliability based on provided full path\r\n-            transcript_button_xpath = \"//ytd-video-description-transcript-section-renderer//ytd-button-renderer/yt-button-shape/button\"\r\n+            transcript_button_xpath = \"//ytd-structured-description-content-renderer[@id='structured-description']//ytd-video-description-transcript-section-renderer[@class='style-scope ytd-structured-description-content-renderer']//div[@class='yt-spec-touch-feedback-shape__fill']\"\r\n             transcript_button = wait.until(EC.element_to_be_clickable((By.XPATH, transcript_button_xpath)))\r\n             try:\r\n                 transcript_button.click()\r\n             except ElementClickInterceptedException:\r\n                 print(\"Debug: Click intercepted on transcript button. Using JavaScript to click...\")\r\n                 driver.execute_script(\"arguments[0].click();\", transcript_button)\r\n             print(\"Debug: Clicked 'Show transcript'.\")\r\n-            time.sleep(3)  # Allow transcript to load\r\n+            time.sleep(5)  # Increased time to allow transcript to load fully\r\n         except TimeoutException:\r\n             print(\"Debug: No 'Show transcript' button found in description. Trying alternative method...\")\r\n             # Fallback: Click more actions button\r\n             try:\r\n@@ -67,35 +66,34 @@\n                 except ElementClickInterceptedException:\r\n                     print(\"Debug: Click intercepted on transcript item. Using JavaScript to click...\")\r\n                     driver.execute_script(\"arguments[0].click();\", transcript_item)\r\n                 print(\"Debug: Clicked 'Show transcript' from menu.\")\r\n-                time.sleep(3)  # Allow transcript to load\r\n+                time.sleep(5)  # Increased time to allow transcript to load fully\r\n             except TimeoutException:\r\n                 print(\"Error: Could not find 'Show transcript' option. Transcript may not be available.\")\r\n                 return None\r\n \r\n         # Step 5: Wait for transcript panel to load\r\n-                print(\"Step 5: Waiting for transcript panel to load...\")\r\n-                try:\r\n-                    transcript_title_xpath = \"//ytd-engagement-panel-section-list-renderer[@target-id='engagement-panel-searchable-transcript']//yt-formatted-string[@id='title-text']\"\r\n-                    wait.until(EC.visibility_of_element_located((By.XPATH, transcript_title_xpath)))\r\n-                    print(\"Debug: Transcript panel loaded (title visible).\")\r\n-                    time.sleep(2)  # Ensure content is rendered\r\n-                except TimeoutException:\r\n-                    print(\"Error: Transcript panel did not load (title not found).\")\r\n-                    return None\r\n+        print(\"Step 5: Waiting for transcript panel to load...\")\r\n+        try:\r\n+            transcript_panel_xpath = \"//ytd-engagement-panel-section-list-renderer[@target-id='engagement-panel-searchable-transcript']\"\r\n+            wait.until(EC.visibility_of_element_located((By.XPATH, transcript_panel_xpath)))\r\n+            print(\"Debug: Transcript panel loaded.\")\r\n+            time.sleep(2)  # Ensure content is rendered\r\n+        except TimeoutException:\r\n+            print(\"Error: Transcript panel did not load.\")\r\n+            return None\r\n \r\n         # Step 6: Extract transcript text\r\n         print(\"Step 6: Extracting transcript text...\")\r\n         try:\r\n-            # Use provided XPath base to find all yt-formatted-string in transcript segments\r\n+            # Use the provided XPath base for transcript elements\r\n             transcript_elements_xpath = \"//ytd-engagement-panel-section-list-renderer[@target-id='engagement-panel-searchable-transcript']//ytd-transcript-segment-renderer//yt-formatted-string\"\r\n             transcript_elements = driver.find_elements(By.XPATH, transcript_elements_xpath)\r\n             if not transcript_elements:\r\n-                print(\"Debug: No elements with updated XPath. Trying fallback selector...\")\r\n+                print(\"Debug: No elements with updated XPath. Trying fallback selectors...\")\r\n                 transcript_elements = driver.find_elements(By.CSS_SELECTOR, \".ytd-transcript-segment-renderer .ytd-transcript-segment-text\")\r\n             if not transcript_elements:\r\n-                print(\"Debug: No elements with primary selector. Trying alternative...\")\r\n                 transcript_elements = driver.find_elements(By.CSS_SELECTOR, \".cue.style-scope.ytd-transcript-body-renderer\")\r\n             if not transcript_elements:\r\n                 print(\"Error: No transcript elements found.\")\r\n                 return None\r\n"
                },
                {
                    "date": 1756929024700,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,17 +38,18 @@\n \r\n         # Step 4: Click 'Show transcript' button\r\n         try:\r\n             print(\"Step 4: Clicking 'Show transcript' button...\")\r\n-            transcript_button_xpath = \"//ytd-structured-description-content-renderer[@id='structured-description']//ytd-video-description-transcript-section-renderer[@class='style-scope ytd-structured-description-content-renderer']//div[@class='yt-spec-touch-feedback-shape__fill']\"\r\n+            # Updated XPath for reliability based on provided full path\r\n+            transcript_button_xpath = \"//ytd-video-description-transcript-section-renderer//ytd-button-renderer/yt-button-shape/button\"\r\n             transcript_button = wait.until(EC.element_to_be_clickable((By.XPATH, transcript_button_xpath)))\r\n             try:\r\n                 transcript_button.click()\r\n             except ElementClickInterceptedException:\r\n                 print(\"Debug: Click intercepted on transcript button. Using JavaScript to click...\")\r\n                 driver.execute_script(\"arguments[0].click();\", transcript_button)\r\n             print(\"Debug: Clicked 'Show transcript'.\")\r\n-            time.sleep(5)  # Increased time to allow transcript to load fully\r\n+            time.sleep(3)  # Allow transcript to load\r\n         except TimeoutException:\r\n             print(\"Debug: No 'Show transcript' button found in description. Trying alternative method...\")\r\n             # Fallback: Click more actions button\r\n             try:\r\n@@ -66,34 +67,35 @@\n                 except ElementClickInterceptedException:\r\n                     print(\"Debug: Click intercepted on transcript item. Using JavaScript to click...\")\r\n                     driver.execute_script(\"arguments[0].click();\", transcript_item)\r\n                 print(\"Debug: Clicked 'Show transcript' from menu.\")\r\n-                time.sleep(5)  # Increased time to allow transcript to load fully\r\n+                time.sleep(3)  # Allow transcript to load\r\n             except TimeoutException:\r\n                 print(\"Error: Could not find 'Show transcript' option. Transcript may not be available.\")\r\n                 return None\r\n \r\n         # Step 5: Wait for transcript panel to load\r\n-        print(\"Step 5: Waiting for transcript panel to load...\")\r\n-        try:\r\n-            transcript_panel_xpath = \"//ytd-engagement-panel-section-list-renderer[@target-id='engagement-panel-searchable-transcript']\"\r\n-            wait.until(EC.visibility_of_element_located((By.XPATH, transcript_panel_xpath)))\r\n-            print(\"Debug: Transcript panel loaded.\")\r\n-            time.sleep(2)  # Ensure content is rendered\r\n-        except TimeoutException:\r\n-            print(\"Error: Transcript panel did not load.\")\r\n-            return None\r\n+                print(\"Step 5: Waiting for transcript panel to load...\")\r\n+                try:\r\n+                    transcript_title_xpath = \"//ytd-engagement-panel-section-list-renderer[@target-id='engagement-panel-searchable-transcript']//yt-formatted-string[@id='title-text']\"\r\n+                    wait.until(EC.visibility_of_element_located((By.XPATH, transcript_title_xpath)))\r\n+                    print(\"Debug: Transcript panel loaded (title visible).\")\r\n+                    time.sleep(2)  # Ensure content is rendered\r\n+                except TimeoutException:\r\n+                    print(\"Error: Transcript panel did not load (title not found).\")\r\n+                    return None\r\n \r\n         # Step 6: Extract transcript text\r\n         print(\"Step 6: Extracting transcript text...\")\r\n         try:\r\n-            # Use the provided XPath base for transcript elements\r\n+            # Use provided XPath base to find all yt-formatted-string in transcript segments\r\n             transcript_elements_xpath = \"//ytd-engagement-panel-section-list-renderer[@target-id='engagement-panel-searchable-transcript']//ytd-transcript-segment-renderer//yt-formatted-string\"\r\n             transcript_elements = driver.find_elements(By.XPATH, transcript_elements_xpath)\r\n             if not transcript_elements:\r\n-                print(\"Debug: No elements with updated XPath. Trying fallback selectors...\")\r\n+                print(\"Debug: No elements with updated XPath. Trying fallback selector...\")\r\n                 transcript_elements = driver.find_elements(By.CSS_SELECTOR, \".ytd-transcript-segment-renderer .ytd-transcript-segment-text\")\r\n             if not transcript_elements:\r\n+                print(\"Debug: No elements with primary selector. Trying alternative...\")\r\n                 transcript_elements = driver.find_elements(By.CSS_SELECTOR, \".cue.style-scope.ytd-transcript-body-renderer\")\r\n             if not transcript_elements:\r\n                 print(\"Error: No transcript elements found.\")\r\n                 return None\r\n"
                },
                {
                    "date": 1756929623209,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,8 +6,10 @@\n from selenium.common.exceptions import TimeoutException, NoSuchElementException, ElementClickInterceptedException\r\n from webdriver_manager.chrome import ChromeDriverManager\r\n from selenium.webdriver.chrome.service import Service as ChromeService\r\n import time\r\n+import spacy\r\n+import requests\r\n \r\n def main(url):\r\n     print(\"Step 1: Setting up Chrome driver...\")\r\n     # Use webdriver-manager to automatically download and install chromedriver\r\n@@ -73,17 +75,17 @@\n                 print(\"Error: Could not find 'Show transcript' option. Transcript may not be available.\")\r\n                 return None\r\n \r\n         # Step 5: Wait for transcript panel to load\r\n-                print(\"Step 5: Waiting for transcript panel to load...\")\r\n-                try:\r\n-                    transcript_title_xpath = \"//ytd-engagement-panel-section-list-renderer[@target-id='engagement-panel-searchable-transcript']//yt-formatted-string[@id='title-text']\"\r\n-                    wait.until(EC.visibility_of_element_located((By.XPATH, transcript_title_xpath)))\r\n-                    print(\"Debug: Transcript panel loaded (title visible).\")\r\n-                    time.sleep(2)  # Ensure content is rendered\r\n-                except TimeoutException:\r\n-                    print(\"Error: Transcript panel did not load (title not found).\")\r\n-                    return None\r\n+        print(\"Step 5: Waiting for transcript panel to load...\")\r\n+        try:\r\n+            transcript_title_xpath = \"//ytd-engagement-panel-section-list-renderer[@target-id='engagement-panel-searchable-transcript']//yt-formatted-string[@id='title-text']\"\r\n+            wait.until(EC.visibility_of_element_located((By.XPATH, transcript_title_xpath)))\r\n+            print(\"Debug: Transcript panel loaded (title visible).\")\r\n+            time.sleep(2)  # Ensure content is rendered\r\n+        except TimeoutException:\r\n+            print(\"Error: Transcript panel did not load (title not found).\")\r\n+            return None\r\n \r\n         # Step 6: Extract transcript text\r\n         print(\"Step 6: Extracting transcript text...\")\r\n         try:\r\n@@ -100,16 +102,81 @@\n                 print(\"Error: No transcript elements found.\")\r\n                 return None\r\n             transcript_text = '\\n'.join([elem.text.strip() for elem in transcript_elements if elem.text.strip()])\r\n             print(f\"Debug: Extracted {len(transcript_elements)} lines of transcript.\")\r\n-            return transcript_text\r\n         except NoSuchElementException:\r\n             print(\"Error: Transcript elements not found.\")\r\n             return None\r\n \r\n+        # Step 7: NLP Processing\r\n+        print(\"Step 7: Processing transcript with NLP...\")\r\n+        try:\r\n+            # Load spaCy model (assume 'en_core_web_sm' is installed)\r\n+            nlp = spacy.load(\"en_core_web_sm\")\r\n+            doc = nlp(transcript_text)\r\n+            \r\n+            # NLP steps: Tokenization, Lemmatization, Remove stop words and punctuation\r\n+            processed_tokens = [token.lemma_ for token in doc if not token.is_stop and not token.is_punct and token.text.strip()]\r\n+            processed_text = ' '.join(processed_tokens)\r\n+            \r\n+            # Entity recognition (optional enhancement)\r\n+            entities = [(ent.text, ent.label_) for ent in doc.ents]\r\n+            print(f\"Debug: Extracted {len(entities)} entities (e.g., {entities[:5]}...)\")\r\n+\r\n+            # Chunking for RAG: Split into sentences\r\n+            sentences = [sent.text.strip() for sent in doc.sents if sent.text.strip()]\r\n+            chunk_size = 200  # Words per chunk for RAG\r\n+            chunks = []\r\n+            current_chunk = []\r\n+            current_word_count = 0\r\n+            for sent in sentences:\r\n+                word_count = len(sent.split())\r\n+                if current_word_count + word_count > chunk_size:\r\n+                    chunks.append(' '.join(current_chunk))\r\n+                    current_chunk = [sent]\r\n+                    current_word_count = word_count\r\n+                else:\r\n+                    current_chunk.append(sent)\r\n+                    current_word_count += word_count\r\n+            if current_chunk:\r\n+                chunks.append(' '.join(current_chunk))\r\n+            print(f\"Debug: Created {len(chunks)} chunks for RAG.\")\r\n+\r\n+            # Optional Ollama enhancement (assume Ollama running locally with 'llama2' model)\r\n+            ollama_url = \"http://localhost:11434/api/generate\"\r\n+            enhanced_chunks = []\r\n+            for chunk in chunks:\r\n+                payload = {\r\n+                    \"model\": \"llama2\",\r\n+                    \"prompt\": f\"Enhance and correct this transcript chunk for clarity and accuracy: {chunk}\",\r\n+                    \"stream\": False\r\n+                }\r\n+                response = requests.post(ollama_url, json=payload)\r\n+                if response.status_code == 200:\r\n+                    enhanced_text = response.json()['response']\r\n+                    enhanced_chunks.append(enhanced_text)\r\n+                    print(\"Debug: Enhanced chunk with Ollama.\")\r\n+                else:\r\n+                    print(f\"Error enhancing with Ollama: {response.text}\")\r\n+                    enhanced_chunks.append(chunk)  # Fallback to original\r\n+            processed_text = '\\n\\n'.join(enhanced_chunks)\r\n+\r\n+            # Save to processed txt file\r\n+            output_file = \"processed_transcript.txt\"\r\n+            with open(output_file, 'w', encoding='utf-8') as f:\r\n+                f.write(processed_text)\r\n+            print(f\"Debug: Saved processed transcript to {output_file}\")\r\n+            return processed_text\r\n+        except ImportError:\r\n+            print(\"Error: spaCy not installed. Skipping NLP.\")\r\n+            return transcript_text\r\n+        except Exception as e:\r\n+            print(f\"Error in NLP processing: {e}\")\r\n+            return transcript_text\r\n+\r\n     finally:\r\n-        # Step 7: Close the browser\r\n-        print(\"Step 7: Closing browser...\")\r\n+        # Step 8: Close the browser\r\n+        print(\"Step 8: Closing browser...\")\r\n         time.sleep(5)  # Pause to allow viewing the browser\r\n         driver.quit()\r\n         print(\"Debug: Browser closed.\")\r\n \r\n"
                },
                {
                    "date": 1756929676919,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -145,9 +145,9 @@\n             ollama_url = \"http://localhost:11434/api/generate\"\r\n             enhanced_chunks = []\r\n             for chunk in chunks:\r\n                 payload = {\r\n-                    \"model\": \"llama2\",\r\n+                    \"model\": \"qwen2.5:7b\",\r\n                     \"prompt\": f\"Enhance and correct this transcript chunk for clarity and accuracy: {chunk}\",\r\n                     \"stream\": False\r\n                 }\r\n                 response = requests.post(ollama_url, json=payload)\r\n"
                },
                {
                    "date": 1756929877399,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -146,9 +146,9 @@\n             enhanced_chunks = []\r\n             for chunk in chunks:\r\n                 payload = {\r\n                     \"model\": \"qwen2.5:7b\",\r\n-                    \"prompt\": f\"Enhance and correct this transcript chunk for clarity and accuracy: {chunk}\",\r\n+                    \"prompt\": f\"Enhance and correct this transcript chunk for clarity and accuracy: {chunk}. Include only the corrected text, do not include a summarization of the changes.\",\r\n                     \"stream\": False\r\n                 }\r\n                 response = requests.post(ollama_url, json=payload)\r\n                 if response.status_code == 200:\r\n"
                },
                {
                    "date": 1756930401051,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -140,9 +140,9 @@\n             if current_chunk:\r\n                 chunks.append(' '.join(current_chunk))\r\n             print(f\"Debug: Created {len(chunks)} chunks for RAG.\")\r\n \r\n-            # Optional Ollama enhancement (assume Ollama running locally with 'llama2' model)\r\n+            #  Ollama enhancement (assume Ollama running locally with 'qwen2.5:7b' model)\r\n             ollama_url = \"http://localhost:11434/api/generate\"\r\n             enhanced_chunks = []\r\n             for chunk in chunks:\r\n                 payload = {\r\n"
                },
                {
                    "date": 1756930416326,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -180,9 +180,9 @@\n         driver.quit()\r\n         print(\"Debug: Browser closed.\")\r\n \r\n # Example usage\r\n-video_url = \"https://www.youtube.com/watch?v=VxOQjqNgQ5E\"\r\n+video_url = \"https://www.youtube.com/watch?v=mTZ8K0DCVIU\"\r\n transcript = main(video_url)\r\n if transcript:\r\n     print(\"Extracted Transcript:\\n\")\r\n     print(transcript)\r\n"
                },
                {
                    "date": 1756930479185,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,9 +20,9 @@\n     try:\r\n         print(\"Step 2: Opening browser and navigating to URL...\")\r\n         driver.get(url)\r\n         print(f\"Debug: Navigated to {url}. Current title: {driver.title}\")\r\n-        time.sleep(2)  # Allow page to fully load\r\n+        time.sleep(10)  # Allow page to fully load\r\n \r\n         # Step 3: Expand description (\"...more\")\r\n         try:\r\n             print(\"Step 3: Expanding description ('...more')...\")\r\n"
                }
            ],
            "date": 1756926556002,
            "name": "Commit-0",
            "content": "# yt_selenium_transcript.py\r\nfrom selenium import webdriver\r\nfrom selenium.webdriver.common.by import By\r\nfrom selenium.webdriver.support.ui import WebDriverWait\r\nfrom selenium.webdriver.support import expected_conditions as EC\r\nfrom selenium.common.exceptions import TimeoutException, NoSuchElementException\r\nfrom webdriver_manager.chrome import ChromeDriverManager\r\nimport time\r\n\r\ndef main(url):\r\n    print(\"Step 1: Setting up Chrome driver...\")\r\n    # Use webdriver-manager to automatically download and install chromedriver\r\n    driver = webdriver.Chrome(ChromeDriverManager().install())\r\n    wait = WebDriverWait(driver, 30)\r\n\r\n    try:\r\n        print(\"Step 2: Opening browser and navigating to URL...\")\r\n        driver.get(url)\r\n        print(f\"Debug: Navigated to {url}. Current title: {driver.title}\")\r\n\r\n        # Step 3: Handle cookies popup if present\r\n        try:\r\n            print(\"Step 3: Checking for cookies acceptance button...\")\r\n            accept_button = wait.until(EC.element_to_be_clickable((By.XPATH, \"//button[contains(text(), 'Accept all')]\")))\r\n            accept_button.click()\r\n            print(\"Debug: Accepted cookies.\")\r\n        except TimeoutException:\r\n            print(\"Debug: No cookies button found or timed out. Continuing...\")\r\n\r\n        # Step 4: Expand description if needed\r\n        try:\r\n            print(\"Step 4: Expanding description...\")\r\n            description_expander = wait.until(EC.element_to_be_clickable((By.ID, \"description-inline-expander\")))\r\n            description_expander.click()\r\n            print(\"Debug: Description expanded.\")\r\n        except TimeoutException:\r\n            print(\"Debug: No description expander found or already expanded.\")\r\n\r\n        # Step 5: Click 'Show transcript' button in description\r\n        try:\r\n            print(\"Step 5: Clicking 'Show transcript' button...\")\r\n            transcript_button = wait.until(EC.element_to_be_clickable((By.XPATH, \"//tp-yt-paper-button[contains(text(), 'Show transcript')]\")))\r\n            transcript_button.click()\r\n            print(\"Debug: Clicked 'Show transcript'.\")\r\n        except TimeoutException:\r\n            print(\"Debug: No 'Show transcript' button found in description. Trying alternative method...\")\r\n            # Fallback: Click more actions button\r\n            try:\r\n                more_actions = wait.until(EC.element_to_be_clickable((By.XPATH, '//button[@aria-label=\"More actions\"]')))\r\n                more_actions.click()\r\n                print(\"Debug: Clicked 'More actions'.\")\r\n                transcript_item = wait.until(EC.element_to_be_clickable((By.XPATH, '//tp-yt-paper-item[contains(text(), \"Show transcript\")]')))\r\n                transcript_item.click()\r\n                print(\"Debug: Clicked 'Show transcript' from menu.\")\r\n            except TimeoutException:\r\n                print(\"Error: Could not find 'Show transcript' option. Transcript may not be available.\")\r\n                return None\r\n\r\n        # Step 6: Wait for transcript panel to load\r\n        print(\"Step 6: Waiting for transcript panel to load...\")\r\n        try:\r\n            wait.until(EC.visibility_of_element_located((By.ID, \"panels\")))\r\n            print(\"Debug: Transcript panel loaded.\")\r\n        except TimeoutException:\r\n            print(\"Error: Transcript panel did not load.\")\r\n            return None\r\n\r\n        # Step 7: Extract transcript text\r\n        print(\"Step 7: Extracting transcript text...\")\r\n        try:\r\n            transcript_elements = driver.find_elements(By.CSS_SELECTOR, \".ytd-transcript-segment-renderer .ytd-transcript-segment-text\")\r\n            if not transcript_elements:\r\n                print(\"Debug: No elements with primary selector. Trying alternative...\")\r\n                transcript_elements = driver.find_elements(By.CSS_SELECTOR, \".cue.style-scope.ytd-transcript-body-renderer\")\r\n            if not transcript_elements:\r\n                print(\"Error: No transcript elements found.\")\r\n                return None\r\n            transcript_text = '\\n'.join([elem.text.strip() for elem in transcript_elements if elem.text.strip()])\r\n            print(f\"Debug: Extracted {len(transcript_elements)} lines of transcript.\")\r\n            return transcript_text\r\n        except NoSuchElementException:\r\n            print(\"Error: Transcript elements not found.\")\r\n            return None\r\n\r\n    finally:\r\n        # Step 8: Close the browser\r\n        print(\"Step 8: Closing browser...\")\r\n        time.sleep(5)  # Pause to allow viewing the browser\r\n        driver.quit()\r\n        print(\"Debug: Browser closed.\")\r\n\r\n# Example usage\r\nvideo_url = \"https://www.youtube.com/watch?v=VxOQjqNgQ5E\"\r\ntranscript = main(video_url)\r\nif transcript:\r\n    print(\"Extracted Transcript:\\n\")\r\n    print(transcript)\r\nelse:\r\n    print(\"Failed to extract transcript.\")"
        }
    ]
}